// routes/tasks.js
import { Router } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const router = Router();

const GROUP_SEP = '::';






// --- Telegram helper (–ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞) ---
async function tg(method, payload) {
  const url = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/${method}`;
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  });
  const data = await r.json();
  if (!data.ok) console.error('Telegram API error:', data);
  return data;
}

// --- when responsible appears -> notify assignee (if settings allow) ---
async function maybeNotifyTaskAccepted({ prisma, taskBefore, taskAfter, actorUser }) {
  try {
    const was = taskBefore?.responsibleId || null;
    const now = taskAfter?.responsibleId || null;
    if (was === now || !now) return; // –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è

    // –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    const assignee = await prisma.user.findUnique({
      where: { id: now },
      select: { telegramId: true, fullName: true },
    });
    if (!assignee?.telegramId) return;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const st = await prisma.notificationSetting.findUnique({
      where: { telegramId: String(assignee.telegramId) },
      select: { receiveTaskAccepted: true, writeAccessGranted: true },
    });
    if (st && (!st.receiveTaskAccepted || !st.writeAccessGranted)) return;

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    const actorName = actorUser?.fullName ?? '–ö—Ç–æ-—Ç–æ';
    const title = taskAfter.title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

    const text = `üë§ <b>${actorName}</b> –ø—Ä–∏–Ω—è–ª(–∞) –∑–∞–¥–∞—á—É: <b>${title}</b>`;

    await tg('sendMessage', {
      chat_id: assignee.telegramId,
      text,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  } catch (e) {
    console.error('notify task accepted error', e);
  }
}










router.delete('/:id', async (req, res) => {
  try {
    const id = String(req.params.id);

    // —Ç—è–Ω–µ–º –∑–∞–¥–∞—á—É –∏ –∫–æ–ª–æ–Ω–∫—É (—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å groupId –∏ –ø–æ–ø—Ä–∞–≤–∏—Ç—å order)
    const task = await prisma.task.findUnique({
      where: { id },
      include: { column: true },
    });
    if (!task) return res.status(404).json({ ok: false, error: 'not_found' });

    // <groupId>::...
    let groupId = null;
    const nm = task.column?.name || '';
    const i = nm.indexOf(GROUP_SEP);
    if (i > 0) groupId = nm.slice(0, i);

    await prisma.$transaction(async (tx) => {
      await tx.task.delete({ where: { id } });
      await tx.task.updateMany({
        where: { columnId: task.columnId, order: { gt: task.order } },
        data: { order: { decrement: 1 } },
      });
    });

    return res.json({ ok: true, groupId });
  } catch (e) {
    console.error('DELETE /tasks/:id error:', e);
    res.status(500).json({ ok: false, error: 'internal' });
  }
});





// –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–≤ —Ç.—á. –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ)
router.patch('/:id', async (req, res) => {
  try {
    const id = String(req.params.id);
    const patch = {};

    // –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –º–µ–Ω—è—Ç—å
    if ('title' in req.body) patch.title = String(req.body.title ?? '');
    if ('description' in req.body) patch.description = String(req.body.description ?? '');
    if ('responsibleId' in req.body) {
      // –¥–æ–ø—É—Å–∫–∞–µ–º null –¥–ª—è —Å–Ω—è—Ç–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
      patch.responsibleId = req.body.responsibleId === null ? null : String(req.body.responsibleId);
    }
    if ('columnId' in req.body) patch.columnId = String(req.body.columnId);
    if ('order' in req.body) patch.order = Number(req.body.order);

    const before = await prisma.task.findUnique({ where: { id } });
    if (!before) return res.status(404).json({ ok: false, error: 'not_found' });

    const updated = await prisma.task.update({ where: { id }, data: patch });

    // –∫—Ç–æ —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å auth, –ø–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —é–∑–µ—Ä–∞
    const actorUser = req.user ?? null;

    await maybeNotifyTaskAccepted({
      prisma,
      taskBefore: before,
      taskAfter: updated,
      actorUser,
    });

    res.json({ ok: true, task: updated });
  } catch (e) {
    console.error('PATCH /tasks/:id error:', e);
    res.status(500).json({ ok: false, error: 'internal' });
  }
});






export { router as tasksRouter };
