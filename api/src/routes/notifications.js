// api/src/routes/notifications.js
import express from 'express';

export function notificationsRouter({ prisma }) {
  const router = express.Router();

  // üîé –ü–∏–Ω–≥
  router.get('/ping', (_req, res) => res.json({ ok: true, scope: 'notifications' }));

  // ‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  // GET /notifications/:telegramId
  router.get('/:telegramId', async (req, res) => {
    try {
      const telegramId = String(req.params.telegramId || '');
      if (!telegramId) return res.status(400).json({ ok: false, error: 'telegramId_required' });

      const st = await prisma.notificationSetting.findUnique({ where: { telegramId } });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
      const settings = {
        telegramId,
        receiveTaskAccepted: st?.receiveTaskAccepted ?? true,
        receiveTaskCompletedMine: st?.receiveTaskCompletedMine ?? true,
        receiveTaskComment: st?.receiveTaskComment ?? true, // ‚¨ÖÔ∏è —Ñ–ª–∞–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        writeAccessGranted: st?.writeAccessGranted ?? false,
      };

      res.json({ ok: true, settings });
    } catch (e) {
      console.error('[notifications.get] error', e);
      res.status(500).json({ ok: false, error: 'internal' });
    }
  });

  // üîî –ú–∞—Å—Ç–µ—Ä-—Ç—É–º–±–ª–µ—Ä (–ø–æ—Å–ª–µ requestWriteAccess)
  // POST /notifications/toggle { telegramId, enabled }
  router.post('/toggle', async (req, res) => {
    try {
      const { telegramId, enabled } = req.body || {};
      if (!telegramId) return res.status(400).json({ ok: false, error: 'telegramId_required' });

      const data = {
        telegramId: String(telegramId),
        receiveTaskAccepted: !!enabled,
        // receiveTaskCompletedMine –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–µ–∫–±–æ–∫—Å–æ–º
        writeAccessGranted: !!enabled,
      };

      await prisma.notificationSetting.upsert({
        where: { telegramId: data.telegramId },
        create: {
          telegramId: data.telegramId,
          receiveTaskAccepted: data.receiveTaskAccepted,
          writeAccessGranted: data.writeAccessGranted,
          receiveTaskCompletedMine: true,   // –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          receiveTaskComment: true,         // ‚¨ÖÔ∏è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∂–µ –≤–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        },
        update: {
          receiveTaskAccepted: data.receiveTaskAccepted,
          writeAccessGranted: data.writeAccessGranted,
        },
      });

      res.json({ ok: true });
    } catch (e) {
      console.error('[notifications.toggle] error', e);
      res.status(500).json({ ok: false, error: 'internal' });
    }
  });

  // üì© –¢–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  // POST /notifications/test { telegramId: string, text?: string }
  router.post('/test', async (req, res) => {
    try {
      const { telegramId, text } = req.body || {};
      if (!telegramId) return res.status(400).json({ ok: false, error: 'telegramId_required' });

      const url = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`;
      const r = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: String(telegramId),
          text: text || 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!',
          disable_web_page_preview: true,
        }),
      });
      const data = await r.json();
      if (!data?.ok) {
        console.error('[notifications.test] Telegram error:', data);
        return res.status(502).json({ ok: false, error: 'telegram_error', details: data?.description || '' });
      }
      return res.json({ ok: true });
    } catch (e) {
      console.error('[notifications.test] error', e);
      res.status(500).json({ ok: false, error: 'internal' });
    }
  });

  // üß© –¢–æ—á–Ω—ã–π –∞–ø–¥–µ–π—Ç —á–µ–∫–±–æ–∫—Å–æ–≤
  // POST /notifications/me { telegramId, receiveTaskAccepted?, receiveTaskCompletedMine?, receiveTaskComment?, writeAccessGranted? }
  router.post('/me', async (req, res) => {
    try {
      const {
        telegramId,
        receiveTaskAccepted,
        receiveTaskCompletedMine,
        receiveTaskComment,
        writeAccessGranted,
      } = req.body || {};

      if (!telegramId) return res.status(400).json({ ok: false, error: 'telegramId_required' });

      const payload = {
        telegramId: String(telegramId),
        ...(typeof receiveTaskAccepted === 'boolean' ? { receiveTaskAccepted } : {}),
        ...(typeof receiveTaskCompletedMine === 'boolean' ? { receiveTaskCompletedMine } : {}),
        ...(typeof receiveTaskComment === 'boolean' ? { receiveTaskComment } : {}), // ‚¨ÖÔ∏è –Ω–æ–≤—ã–π —Ñ–ª–∞–≥
        ...(typeof writeAccessGranted === 'boolean' ? { writeAccessGranted } : {}),
      };

      const saved = await prisma.notificationSetting.upsert({
        where: { telegramId: payload.telegramId },
        create: payload,
        update: payload,
      });

      res.json({ ok: true, settings: saved });
    } catch (e) {
      console.error('[notifications.me] error', e);
      res.status(500).json({ ok: false, error: 'internal' });
    }
  });

  return router;
}
