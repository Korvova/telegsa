// api/src/scheduler.js
import schedule from 'node-schedule';

/* ===== helpers: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ TG ===== */
const DIGITS_RE = /^\d+$/;

async function canDM(prisma, chatId) {
  const id = String(chatId || '');
  if (!DIGITS_RE.test(id)) return false; // —Ç–æ–ª—å–∫–æ numeric id

  // –Ω–µ —Å–ª–∞—Ç—å –±–æ—Ç–∞–º
  try {
    const u = await prisma.user.findUnique({ where: { chatId: id } });
    if (u?.username && String(u.username).toLowerCase().endsWith('bot')) return false;
  } catch {}

  // —É–≤–∞–∂–∞—Ç—å writeAccessGranted
  try {
    const s = await prisma.notificationSetting.findUnique({
      where: { telegramId: id },
      select: { writeAccessGranted: true },
    });
    if (!s || !s.writeAccessGranted) return false;
  } catch {}

  return true;
}

function isPermanentTgError(e) {
  const desc = (e?.description || e || '').toString();
  return /chat not found/i.test(desc)
      || /bots can'?t send messages to bots/i.test(desc)
      || /bot was blocked by the user/i.test(desc);
}

/* ===== –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö job ===== */
const jobs = new Map();
const log = (...args) => console.log('[reminders]', ...args);

/* ===== –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===== */
async function fireReminder({ prisma, tg }, r) {
  try {
    // —Å–≤–µ–∂–∞—è –∑–∞–ø–∏—Å—å (–º–æ–≥–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)
    const fresh = await prisma.eventReminder.findUnique({ where: { id: r.id } });
    if (!fresh || fresh.sentAt) {
      jobs.get(r.id)?.cancel();
      jobs.delete(r.id);
      return;
    }

    // üîí —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (!(await canDM(prisma, fresh.chatId))) {
      // —Å—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º, —á—Ç–æ–±—ã –Ω–µ —Ä–µ—Ç—Ä–∞–∏—Ç—å
      await prisma.$transaction([
        prisma.eventReminder.update({
          where: { id: fresh.id },
          data: { sentAt: new Date() },
        }),
        prisma.eventReminder.delete({ where: { id: fresh.id } }),
      ]).catch(async () => {
        // –µ—Å–ª–∏ delete –Ω–µ –ø—Ä–æ—à—ë–ª ‚Äî —Ö–æ—Ç—è –±—ã sentAt
        await prisma.eventReminder.update({
          where: { id: fresh.id },
          data: { sentAt: new Date() },
        }).catch(() => {});
      });
      log('skip (cannot DM)', fresh.id, 'to', fresh.chatId);
      return;
    }

    const text = `üîî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${fresh.offsetMinutes} –º–∏–Ω—É—Ç.`;
    const payload = {
      chat_id: fresh.chatId,
      text,
      reply_to_message_id: fresh.replyToMessageId ?? undefined,
      allow_sending_without_reply: true,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[
          { text: '–û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ', url: `https://t.me/${process.env.BOT_USERNAME}?startapp=task_${fresh.eventId}` },
          { text: '–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 10 –º–∏–Ω', callback_data: `evt_snooze:${fresh.eventId}:10` }
        ]]
      },
    };

    const sent = await tg('sendMessage', payload);

    if (sent?.ok) {
      // –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
      try {
        await prisma.$transaction([
          prisma.eventReminder.update({
            where: { id: fresh.id },
            data: { sentAt: new Date() },
          }),
          prisma.eventReminder.delete({ where: { id: fresh.id } }),
        ]);
      } catch (e) {
        log('delete after sent failed:', e?.message || e);
      }
      log('sent & deleted', fresh.id, 'to', fresh.chatId);
    } else {
      // TG –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –≤ —Ç–µ–ª–µ
      const desc = sent?.description || sent;
      log('send failed:', desc);
      if (isPermanentTgError(sent)) {
        // –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º —Ñ–∞—Ç–∞–ª—å–Ω—ã–µ ‚Üí –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        await prisma.eventReminder.update({
          where: { id: fresh.id },
          data: { sentAt: new Date() },
        }).catch(() => {});
        // –ø–æ –∂–µ–ª–∞–Ω–∏—é: –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É delete, —á—Ç–æ–±—ã —á–∏—Å—Ç–æ
        await prisma.eventReminder.delete({ where: { id: fresh.id } }).catch(() => {});
      } else {
        await prisma.eventReminder.update({
          where: { id: fresh.id },
          data: { tries: { increment: 1 } },
        }).catch(() => {});
      }
    }
  } catch (e) {
    // –ª—é–±–∞—è –∏–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–º tries, –¥–∞–¥–∏–º –ø–æ–≤—Ç–æ—Ä
    try {
      await prisma.eventReminder.update({
        where: { id: r.id },
        data: { tries: { increment: 1 } },
      });
    } catch {}
    log('fire error:', e?.message || e);
  } finally {
    // job –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω (–º—ã —à–µ–¥—É–ª–∏–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
    const job = jobs.get(r.id);
    if (job) job.cancel();
    jobs.delete(r.id);
  }
}

/* ===== –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ ===== */
function planOne({ prisma, tg }, r) {
  // —Ä–µ—Å–∫–µ–π–¥: –æ—Ç–º–µ–Ω–∏–º, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ
  const existed = jobs.get(r.id);
  if (existed) existed.cancel();
  jobs.delete(r.id);

  const when = new Date(r.fireAt);
  const now = new Date();
  if (when <= now) {
    // –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    fireReminder({ prisma, tg }, r);
    return;
  }

  const job = schedule.scheduleJob(when, () => fireReminder({ prisma, tg }, r));
  jobs.set(r.id, job);
  log('scheduled', r.id, 'at', when.toISOString(), 'for', r.chatId);
}

/* ===== –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===== */
export async function initReminderScheduler({ prisma, tg }) {
  const now = new Date();

  // –ø–ª–∞–Ω–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ
  const future = await prisma.eventReminder.findMany({
    where: { sentAt: null, fireAt: { gt: now } },
    orderBy: { fireAt: 'asc' },
  });
  future.forEach(r => planOne({ prisma, tg }, r));

  // –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É
  const overdue = await prisma.eventReminder.findMany({
    where: { sentAt: null, fireAt: { lte: now } },
    orderBy: { fireAt: 'asc' },
  });
  overdue.forEach(r => fireReminder({ prisma, tg }, r));

  log('init done. planned:', future.length, 'overdue fired:', overdue.length);
}

/* ===== –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏—è ===== */
export async function scheduleRemindersForEvent(prisma, tg, eventId) {
  const rows = await prisma.eventReminder.findMany({
    where: { eventId: String(eventId), sentAt: null },
  });
  rows.forEach(r => planOne({ prisma, tg }, r));
  return rows.length;
}
