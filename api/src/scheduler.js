// api/src/scheduler.js
import schedule from 'node-schedule';

/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∂–æ–±:
 * key = reminder.id, value = schedule.Job
 */
const jobs = new Map();

/** –°–µ—Ä–≤–∏—Å–Ω—ã–π –ª–æ–≥ */
const log = (...args) => console.log('[reminders]', ...args);

/** –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ (delete –∏–ª–∏ retry) */
async function fireReminder({ prisma, tg }, r) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î (–º–æ–≥–ª–∏ —É–∂–µ —É–¥–∞–ª–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
    const fresh = await prisma.eventReminder.findUnique({ where: { id: r.id } });
    if (!fresh || fresh.sentAt) {
      jobs.get(r.id)?.cancel();
      jobs.delete(r.id);
      return;
    }

    const text = `üîî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${fresh.offsetMinutes} –º–∏–Ω—É—Ç.`;

    const payload = {
      chat_id: fresh.chatId,
      text,
      // –µ—Å–ª–∏ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
      reply_to_message_id: fresh.replyToMessageId ?? undefined,
      allow_sending_without_reply: true,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[
          { text: '–û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ', url: `https://t.me/${process.env.BOT_USERNAME}?startapp=task_${fresh.eventId}` },
          { text: '–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 10 –º–∏–Ω', callback_data: `evt_snooze:${fresh.eventId}:10` }
        ]]
      },
   };
    const sent = await tg('sendMessage', payload);

    if (sent?.ok) {
      // –ø–æ–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø–∏—Å—å (–ø–æ —Ç–≤–æ–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
      try {
        await prisma.$transaction([
          prisma.eventReminder.update({
            where: { id: fresh.id },
            data: { sentAt: new Date() },
          }),
          prisma.eventReminder.delete({ where: { id: fresh.id } }),
        ]);
      } catch (e) {
        // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ delete –Ω–µ –ø—Ä–æ—à—ë–ª ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, sentAt —É–∂–µ —Å—Ç–æ–∏—Ç
        log('delete after sent failed:', e?.message || e);
      }
      log('sent & deleted', fresh.id, 'to', fresh.chatId);
    } else {
      // TG –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ‚Äî —É–≤–µ–ª–∏—á–∏–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      await prisma.eventReminder.update({
        where: { id: fresh.id },
        data: { tries: { increment: 1 } },
      });
      log('send failed:', sent?.description || sent);
    }
  } catch (e) {
    // –ª—é–±–∞—è –∏–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–º tries
    try {
      await prisma.eventReminder.update({
        where: { id: r.id },
        data: { tries: { increment: 1 } },
      });
    } catch {}
    log('fire error:', e?.message || e);
  } finally {
    // –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ ‚Äî –¥–∂–æ–± –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    const job = jobs.get(r.id);
    if (job) job.cancel();
    jobs.delete(r.id);
  }
}

/** –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –û–î–ù–£ –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É) */
function planOne({ prisma, tg }, r) {
  // –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –¥–∂–æ–±–∞ ‚Äî –æ—Ç–º–µ–Ω–∏–º (—Ä–µ—Å–∫–µ–π–¥)
  const existed = jobs.get(r.id);
  if (existed) existed.cancel();
  jobs.delete(r.id);

  const when = new Date(r.fireAt);
  const now = new Date();
  if (when <= now) {
    // –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    fireReminder({ prisma, tg }, r);
    return;
  }

  const job = schedule.scheduleJob(when, () => fireReminder({ prisma, tg }, r));
  jobs.set(r.id, job);
  log('scheduled', r.id, 'at', when.toISOString(), 'for', r.chatId);
}

/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –ø–æ–¥—Ü–µ–ø–∏—Ç—å –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ */
export async function initReminderScheduler({ prisma, tg }) {
  const now = new Date();

  // –ë—É–¥—É—â–∏–µ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º
  const future = await prisma.eventReminder.findMany({
    where: { sentAt: null, fireAt: { gt: now } },
    orderBy: { fireAt: 'asc' },
  });
  future.forEach(r => planOne({ prisma, tg }, r));

  // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É
  const overdue = await prisma.eventReminder.findMany({
    where: { sentAt: null, fireAt: { lte: now } },
    orderBy: { fireAt: 'asc' },
  });
  overdue.forEach(r => fireReminder({ prisma, tg }, r));

  log('init done. planned:', future.length, 'overdue fired:', overdue.length);
}

/** –£–¥–æ–±–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */
export async function scheduleRemindersForEvent(prisma, tg, eventId) {
  const rows = await prisma.eventReminder.findMany({
    where: { eventId: String(eventId), sentAt: null },
  });
  rows.forEach(r => planOne({ prisma, tg }, r));
  return rows.length;
}
