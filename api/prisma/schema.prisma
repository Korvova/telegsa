generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * Колонки канбана. Колонки уникальны в рамках chatId.
 * Пример: Inbox (0), Doing (1), Done (2)
 */
model Column {
  id        String   @id @default(cuid())
  chatId    String
  name      String
  order     Int
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, name])

  @@index([chatId])
}

/**
 * Задачи. Привязаны к колонке и к chatId (для быстрого фильтра по чату).
 */
model Task {
  id          String   @id @default(cuid())
  chatId      String
  text        String
  order       Int
  tgMessageId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // связь с колонкой (kanban-стадией)
  columnId String
  column   Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([columnId, order])
}



/// === Groups ===
/// Владелец (ownerChatId) создаёт группу. Участники — через GroupMember.
model Group {
  id           String   @id @default(cuid())
  ownerChatId  String
  title        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  members      GroupMember[]

  @@unique([ownerChatId, title])
  @@index([ownerChatId])
}

/// Членство пользователя (chatId) в группе
model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  chatId    String
  role      String   @default("member")
  createdAt DateTime @default(now())

  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, chatId])
  @@index([chatId])
}




