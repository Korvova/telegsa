generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * –ö–æ–ª–æ–Ω–∫–∏ –∫–∞–Ω–±–∞–Ω–∞. –ö–æ–ª–æ–Ω–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö chatId –ø–æ –ò–ú–ï–ù–ò.
 * –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∏–º–µ–Ω–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º groupId::...
 */
model Column {
  id        String   @id @default(cuid())
  chatId    String
  name      String
  order     Int
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, name])
  @@index([chatId])
}

/**
 * -------------------- NEW/UPDATED ENUMS --------------------
 */

enum TaskType {
  TASK
  EVENT
}

// –ü—Ä–∏—ë–º–∫–∞ –∑–∞–¥–∞—á–∏
enum AcceptCondition {
  NONE
  PHOTO
  APPROVAL
  PHOTO_AND_APPROVAL
  DOC_AND_APPROVAL
}

enum EventRole {
  ORGANIZER
  PARTICIPANT
}

/**
 * -------------------- TASKS --------------------
 */
/**
 * –ó–∞–¥–∞—á–∏.
 * –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∏–ø—ã: –æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ (TASK) –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (EVENT).
 * –î–ª—è EVENT –∏—Å–ø–æ–ª—å–∑—É–µ–º startAt/endAt, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã.
 */
model Task {
  id String @id @default(cuid())

  chatId      String
  text        String
  order       Int
  tgMessageId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏
  deadlineAt DateTime?

  // –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É (chatId –∞–≤—Ç–æ—Ä–∞; –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç chatId –¥–æ—Å–∫–∏/–≤–ª–∞–¥–µ–ª—å—Ü–∞)
  createdByChatId String?

  columnId String
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  assigneeChatId String?

  // === NEW: —Ç–∏–ø –∑–∞–¥–∞—á–∏/—Å–æ–±—ã—Ç–∏—è + –¥–∞—Ç—ã (–¥–ª—è EVENT)
  type    TaskType  @default(TASK)
  startAt DateTime?
  endAt   DateTime?

  // –£—Å–ª–æ–≤–∏—è –ø—Ä–∏—ë–º–∫–∏
  acceptCondition AcceptCondition @default(NONE)

  // –ò–Ω–≤–∞–π—Ç—ã –Ω–∞ TASK (–∫–∞–∫ –±—ã–ª–æ)
  inviteTickets      InviteTicket[] @relation("TaskInviteTickets")
  // NEW: –∏–Ω–≤–∞–π—Ç—ã –Ω–∞ EVENT (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å –Ω–∞ —Ç–æ—Ç –∂–µ Task, –∫–æ–≥–¥–∞ type=EVENT)
  eventInviteTickets InviteTicket[] @relation("EventInviteTickets")

  // NEW: —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è EVENT, –Ω–æ —Å–≤—è–∑—å –Ω–µ –º–µ—à–∞–µ—Ç TASK)
  participants EventParticipant[]

  sourceChatId    String? // –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  sourceMessageId Int? // message_id –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

  reminders EventReminder[] // one-to-many: Task -> EventReminder

  comments Comment[]

  media TaskMedia[] // –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ Telegram (photo/voice/document)

  labels TaskLabel[] // NEW

  fromProcess Boolean @default(false) // üîÄ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å

  // === Bounty (virtual stars)
  bountyStars    Int      @default(0)
  bountyStatus   String   @default("NONE") // NONE | PLEDGED | PAID | REFUNDED
  bountyByChatId String?

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≥–¥–µ-—Ç–æ –ø—Ä—è–º–æ–π FK –Ω–∞ —É–∑–µ–ª,
  // –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å processNodeId; –∏–Ω–∞—á–µ –ª—É—á—à–µ —É–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –ª–∏—à–Ω–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  // processNodeId   String?  @unique

  relFrom TaskRelation[] @relation("RelFrom")
  relTo   TaskRelation[] @relation("RelTo")

  ProcessNode ProcessNode[]

  // relation back to StarLedger
  ledgers StarLedger[]
  likes   TaskLike[]
  watchers TaskWatcher[]

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç EventReminder)
  taskReminders TaskReminder[]

  @@index([chatId])
  @@index([columnId, order])
  @@index([createdByChatId])
}

/**
 * -------------------- GROUPS --------------------
 */

model Group {
  id          String   @id @default(cuid())
  ownerChatId String
  title       String
  isTelegramGroup Boolean @default(false)
  tgChatId    String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members       GroupMember[]
  shortcuts     GroupShortcut[]
  inviteTickets InviteTicket[]  @relation("GroupInviteTickets")

  labels GroupLabel[] // NEW

  @@unique([ownerChatId, title])
  @@index([ownerChatId])
}

model User {
  chatId    String   @id
  username  String?
  firstName String?
  lastName  String?
  tonAddress    String?
  tonNetwork    String?
  tonWalletApp  String?
  tonVerifiedAt DateTime?
  tonVerifyNonce String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  chatId    String
  role      String   @default("member")
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, chatId])
  @@index([chatId])
}

/**
 * –ö–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ /g_1, /g_2, ...
 * –ö–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —á–∞—Ç–∞; —É –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç–µ ‚Äî –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.
 */
model GroupShortcut {
  id        String   @id @default(cuid())
  chatId    String
  groupId   String
  code      String
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([chatId, code])
  @@unique([chatId, groupId])
  @@index([chatId])
  @@index([groupId])
}

/**
 * -------------------- NOTIFICATIONS / COMMENTS --------------------
 */

model NotificationSetting {
  telegramId               String   @id
  receiveTaskAccepted      Boolean  @default(true)
  writeAccessGranted       Boolean  @default(false)
  receiveTaskCompletedMine Boolean  @default(true)
  updatedAt                DateTime @updatedAt
  receiveTaskComment       Boolean  @default(true)
}

model Comment {
  id           String   @id @default(cuid())
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorChatId String
  text         String
  createdAt    DateTime @default(now())
  likes        CommentLike[]
}

/**
 * -------------------- LEGACY INVITE (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ) --------------------
 */

model Invite {
  id        String    @id @default(cuid())
  type      String // 'TASK'
  mode      String // 'assign'
  token     String    @unique
  taskId    String
  createdBy String?
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

/**
 * -------------------- INVITE TICKETS (—Ä–∞—Å—à–∏—Ä–µ–Ω—ã –ø–æ–¥ EVENT) --------------------
 */

model InviteTicket {
  id     String       @id @default(cuid())
  token  String       @unique
  type   InviteType
  status InviteStatus @default(ACTIVE)

  groupId         String
  taskId          String?
  invitedByChatId String
  createdAt       DateTime  @default(now())
  expiresAt       DateTime?

  // === NEW: –¥–ª—è EVENT ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ Task —Å type=EVENT
  eventId String?
  event   Task?   @relation("EventInviteTickets", fields: [eventId], references: [id])

  // === –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏ (–∫–∞–∫ –±—ã–ª–∏)
  group Group @relation("GroupInviteTickets", fields: [groupId], references: [id], onDelete: Cascade)
  task  Task? @relation("TaskInviteTickets", fields: [taskId], references: [id], onDelete: SetNull)

  @@index([groupId])
  @@index([taskId])
  @@index([eventId])
}

enum InviteType {
  TASK
  GROUP
  EVENT
  WATCH
}

enum InviteStatus {
  ACTIVE
  USED
  EXPIRED
}

enum ProcessNodeType {
  TASK
  EVENT
}

/// –ö–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
enum ReminderTarget {
  ME           // —Å–µ–±–µ (—Å–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
  RESPONSIBLE  // –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ø–æ –∑–∞–¥–∞—á–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  ALL          // –≤—Å–µ–º: –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ + –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π + –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫
}

enum StartMode {
  AFTER_ANY
  AFTER_SELECTED
  AT_DATE
  AT_DATE_AND_SELECTED
  AFTER_DAYS_AND_SELECTED
}

enum CancelMode {
  NONE
  IF_ANY_SELECTED_CANCELED
}

/**
 * -------------------- NEW: –£–ß–ê–°–¢–ù–ò–ö–ò –°–û–ë–´–¢–ò–Ø --------------------
 */

model EventParticipant {
  id      String @id @default(cuid())
  eventId String
  event   Task   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  chatId String
  role   EventRole @default(PARTICIPANT)

  createdAt DateTime @default(now())

  @@unique([eventId, chatId]) // –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å–æ–±—ã—Ç–∏–∏
  @@index([chatId])
}

model EventReminder {
  id      String @id @default(cuid())
  eventId String
  event   Task   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  chatId           String // —É—á–∞—Å—Ç–Ω–∏–∫, –∫–æ–º—É —Å–ª–∞—Ç—å
  offsetMinutes    Int // 60, 10, 5
  fireAt           DateTime // –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Å–ª–∞—Ç—å (startAt - offset)
  replyToMessageId Int? // message_id –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è reply)
  sentAt           DateTime?
  tries            Int       @default(0)
  createdAt        DateTime  @default(now())

  @@unique([eventId, chatId, offsetMinutes]) // –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  @@index([fireAt])
  @@index([eventId, chatId])
}

/**
 * -------------------- TASK REMINDERS --------------------
 * –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á (–Ω–µ —Å–æ–±—ã—Ç–∏–π): —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è fireAt.
 * –ù–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (sentAt != null), —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ—á—ë—Ä–∫–Ω—É—Ç—ã–º–∏ –≤ UI.
 */
model TaskReminder {
  id       String @id @default(cuid())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  target    ReminderTarget
  fireAt    DateTime
  createdBy String   // chatId –∞–≤—Ç–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

  replyToMessageId Int?
  sentAt           DateTime?
  tries            Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([fireAt])
}

/// ==== –ü—Ä–æ—Ü–µ—Å—Å—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ, –±–µ–∑ FK –Ω–∞ —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏) ====

model GroupProcess {
  id            String   @id @default(cuid())
  groupId       String // ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã (–ø–æ–∫–∞ –±–µ–∑ relation, –ø—Ä–∏–≤—è–∂–µ–º –ø–æ–∑–∂–µ)
  title         String? // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
  runMode       String   @default("MANUAL") // MANUAL | SCHEDULE
  scheduleRRule String? // RRULE, –µ—Å–ª–∏ runMode=SCHEDULE
  timezone      String? // –Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Moscow"
  isActive      Boolean  @default(true)
  createdBy     String // chatId —Å–æ–∑–¥–∞—Ç–µ–ª—è
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProcessNode {
  id        String @id @default(cuid())
  processId String
  title     String
  posX      Float  @default(0)
  posY      Float  @default(0)

  status String          @default("PLANNED")
  type   ProcessNodeType @default(TASK)

  assigneeChatId  String?
  createdByChatId String?

  startMode      StartMode @default(AFTER_ANY)
  startDate      DateTime?
  startAfterDays Int?

  cancelMode CancelMode @default(NONE)

  // —Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π (–∫–æ–≥–¥–∞ —É–∑–µ–ª –ø–æ—Ä–æ–¥–∏–ª Task)
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)

  metaJson Json?

  watchers ProcessNodeWatcher[]

  createdAt DateTime @default(now())
}

model ProcessEdge {
  id           String  @id @default(cuid())
  processId    String
  sourceNodeId String
  targetNodeId String
  enabled      Boolean @default(true)
}

model TaskMedia {
  id     String @id @default(cuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  kind       String // 'photo' | 'voice' | 'document'
  tgFileId   String
  tgUniqueId String?
  mimeType   String?
  fileName   String?
  fileSize   Int?
  width      Int?
  height     Int?
  duration   Int?

  createdAt DateTime @default(now())

  @@index([taskId])
}

model ProcessNodeWatcher {
  id     String @id @default(cuid())
  nodeId String
  chatId String

  node ProcessNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([nodeId, chatId])
  @@index([chatId])
}

model ProcessRun {
  id        String   @id @default(cuid())
  processId String // GroupProcess.id
  startedAt DateTime @default(now())
  startedBy String // chatId, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª
  status    String   @default("RUNNING") // RUNNING | COMPLETED | CANCELED
  note      String?
}

model RunTask {
  id                 String    @id @default(cuid())
  runId              String // ProcessRun.id
  nodeId             String // ProcessNode.id
  taskId             String? // ID –∑–∞–¥–∞—á–∏ (—Å–≤—è–∂–µ–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É)
  status             String    @default("PLANNED") // PLANNED | CREATED | IN_PROGRESS | DONE | CANCELED
  checklistMessageId String? // Telegram message id —á–µ–∫-–ª–∏—Å—Ç–∞
  checklistItemId    String?
  telegramChatId     String? // –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫-–ª–∏—Å—Ç
  createdAt          DateTime  @default(now())
  doneAt             DateTime?
}

model GroupLabel {
  id      String @id @default(cuid())
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  title String
  color String? // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: hex, –Ω–∞–ø—Ä–∏–º–µ—Ä "#8BC34A"
  order Int     @default(0)

  tasks TaskLabel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, title])
}

model TaskLabel {
  taskId     String
  labelId    String
  assignedBy String? // chatId, –∫—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–ª
  assignedAt DateTime @default(now())

  task  Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label GroupLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
}

model TaskRelation {
  id String @id @default(cuid())

  fromTaskId String
  toTaskId   String

  groupId   String?
  createdBy String?
  createdAt DateTime @default(now())

  from Task @relation("RelFrom", fields: [fromTaskId], references: [id], onDelete: Cascade)
  to   Task @relation("RelTo", fields: [toTaskId], references: [id], onDelete: Cascade)

  @@index([fromTaskId])
  @@index([toTaskId])
}

model TaskLike {
  id        String   @id @default(cuid())
  taskId    String
  chatId    String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, chatId])
  @@index([chatId])
}

// Watchers of task
model TaskWatcher {
  id        String   @id @default(cuid())
  taskId    String
  chatId    String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, chatId])
  @@index([chatId])
}

model CommentLike {
  id         String   @id @default(cuid())
  commentId  String
  chatId     String
  createdAt  DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, chatId])
  @@index([chatId])
}

/// Ledger of star operations
model StarLedger {
  id         String   @id @default(cuid())
  taskId     String
  fromChatId String
  toChatId   String?
  amount     Int
  kind       String   // PLEDGE | PAYOUT | REFUND
  createdAt  DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  @@index([taskId])
  @@index([fromChatId])
  @@index([toChatId])
}

/// User payout method (MVP: SBP phone)
model UserPayoutMethod {
  chatId    String @id
  method    String @default("SBP")
  phone     String
  bankCode  String?
  updatedAt DateTime @updatedAt
}
