generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * Колонки канбана. Колонки уникальны в рамках chatId по ИМЕНИ.
 * Внутри каждой группы имена с префиксом groupId::...
 */
model Column {
  id        String   @id @default(cuid())
  chatId    String
  name      String
  order     Int
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, name])
  @@index([chatId])
}

/**
 * Задачи.
 */
model Task {
  id          String   @id @default(cuid())

  chatId      String
  text        String
  order       Int
  tgMessageId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  columnId String
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  assigneeChatId String?

  inviteTickets InviteTicket[] @relation("TaskInviteTickets") // ← добавь это

  @@index([chatId])
  @@index([columnId, order])

  sourceChatId     String?  // куда отправили исходное уведомление
  sourceMessageId  Int?     // message_id исходного уведомления

   comments  Comment[]

}

/// === Groups ===
model Group {
  id          String   @id @default(cuid())
  ownerChatId String
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members       GroupMember[]
  shortcuts     GroupShortcut[]
  inviteTickets InviteTicket[]  @relation("GroupInviteTickets") // ← добавь это

  @@unique([ownerChatId, title])
  @@index([ownerChatId])
}


model User {
  chatId    String   @id
  username  String?
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  chatId    String
  role      String   @default("member")
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, chatId])
  @@index([chatId])
}

/**
 * Короткие коды для выбора группы через /g_1, /g_2, ...
 * Код уникален в рамках чата; у каждой группы в чате — не более одного кода.
 */
model GroupShortcut {
  id        String   @id @default(cuid())
  chatId    String
  groupId   String
  code      String
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([chatId, code])
  @@unique([chatId, groupId])
  @@index([chatId])
  @@index([groupId])
}


model NotificationSetting {
  telegramId                 String   @id
  receiveTaskAccepted        Boolean  @default(true)
  writeAccessGranted         Boolean  @default(false)
  receiveTaskCompletedMine   Boolean  @default(true)  // ⬅️ НОВОЕ
  updatedAt                  DateTime @updatedAt
   receiveTaskComment       Boolean @default(true) 
}




model Comment {
  id            String   @id @default(cuid())
  taskId        String
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorChatId  String   // chatId автора (как в user.chatId и task.assigneeChatId)
  text          String
  createdAt     DateTime @default(now())
}





model Invite {
  id         String   @id @default(cuid())
  type       String   // 'TASK'
  mode       String   // 'assign'
  token      String   @unique
  taskId     String
  createdBy  String?
  usedAt     DateTime?
  createdAt  DateTime @default(now())
}




model InviteTicket {
  id     String       @id @default(cuid())
  token  String       @unique
  type   InviteType
  status InviteStatus @default(ACTIVE)

  groupId         String
  taskId          String?
  invitedByChatId String
  createdAt       DateTime  @default(now())
  expiresAt       DateTime?

  // === именованные связи ===
  group Group @relation("GroupInviteTickets", fields: [groupId], references: [id], onDelete: Cascade)
  task  Task? @relation("TaskInviteTickets", fields: [taskId], references: [id], onDelete: SetNull)

  @@index([groupId])
  @@index([taskId])
}

enum InviteType {
  TASK
  GROUP
}

enum InviteStatus {
  ACTIVE
  USED
  EXPIRED
}
