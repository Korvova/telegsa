import { useEffect, useState } from 'react';


export type StartCondition =
  | 'AFTER_ANY'
  | { mode: 'AFTER_SELECTED'; selectedEdges: string[] }
  | { mode: 'ON_DATE'; date: string } // ISO (–¥–ª—è <input type="datetime-local"> —Ç–æ–∂–µ —Ö—Ä–∞–Ω–∏–º ISO)
  | { mode: 'ON_DATE_AND_AFTER_SELECTED'; date: string; selectedEdges: string[] }
  | { mode: 'AFTER_MINUTES_AND_AFTER_SELECTED'; minutes: number; selectedEdges: string[] };

export type CancelCondition =
  | 'NONE'
  | { mode: 'CANCEL_IF_ANY_SELECTED_CANCELLED'; selectedEdges: string[] };

type EdgeOption = { id: string; label: string };

type Props = {
  open: boolean;
  initialStart?: StartCondition;
  initialCancel?: CancelCondition;
  /** –≤—Ö–æ–¥—è—â–∏–µ —Ä—ë–±—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ (id —Ä–µ–±—Ä–∞ + –ø–æ–¥–ø–∏—Å—å = –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–π –Ω–æ–¥—ã) */
  prevEdges: EdgeOption[];
  onSave: (payload: { start: StartCondition; cancel: CancelCondition }) => void;
  onClose: () => void;
  onDelete: () => void;
};

function ensureDateLocalValue(iso?: string): string {
  if (!iso) return '';
  // –¥–ª—è <input type="datetime-local"> –æ–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DDTHH:mm
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return '';
  const pad = (n: number) => String(n).padStart(2, '0');
  const yyyy = d.getFullYear();
  const mm = pad(d.getMonth() + 1);
  const dd = pad(d.getDate());
  const hh = pad(d.getHours());
  const mi = pad(d.getMinutes());
  return `${yyyy}-${mm}-${dd}T${hh}:${mi}`;
}

export default function NodeConditionsModal({
  open,
  initialStart,
  initialCancel,
  prevEdges,
  onSave,
  onClose,
  onDelete,
}: Props) {
  const [startMode, setStartMode] = useState<
    'AFTER_ANY' | 'AFTER_SELECTED' | 'ON_DATE' | 'ON_DATE_AND_AFTER_SELECTED' | 'AFTER_MINUTES_AND_AFTER_SELECTED'
  >('AFTER_ANY');

  const [startSelected, setStartSelected] = useState<string[]>([]);
  const [startDateLocal, setStartDateLocal] = useState<string>(''); // datetime-local
  const [startMinutes, setStartMinutes] = useState<number>(10);

  const [cancelMode, setCancelMode] = useState<'NONE' | 'CANCEL_IF_ANY_SELECTED_CANCELLED'>('NONE');
  const [cancelSelected, setCancelSelected] = useState<string[]>([]);

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ initial*
  useEffect(() => {
    // start
    if (initialStart === 'AFTER_ANY') {
      setStartMode('AFTER_ANY');
      setStartSelected([]);
      setStartDateLocal('');
      setStartMinutes(10);
    } else if (typeof initialStart === 'object') {
      switch (initialStart.mode) {
        case 'AFTER_SELECTED':
          setStartMode('AFTER_SELECTED');
          setStartSelected([...new Set(initialStart.selectedEdges || [])]);
          setStartDateLocal('');
          setStartMinutes(10);
          break;
        case 'ON_DATE':
          setStartMode('ON_DATE');
          setStartSelected([]);
          setStartDateLocal(ensureDateLocalValue(initialStart.date));
          setStartMinutes(10);
          break;
        case 'ON_DATE_AND_AFTER_SELECTED':
          setStartMode('ON_DATE_AND_AFTER_SELECTED');
          setStartSelected([...new Set(initialStart.selectedEdges || [])]);
          setStartDateLocal(ensureDateLocalValue(initialStart.date));
          setStartMinutes(10);
          break;
        case 'AFTER_MINUTES_AND_AFTER_SELECTED':
          setStartMode('AFTER_MINUTES_AND_AFTER_SELECTED');
          setStartSelected([...new Set(initialStart.selectedEdges || [])]);
          setStartDateLocal('');
          setStartMinutes(
            Number.isFinite(initialStart.minutes) && initialStart.minutes! > 0 ? Number(initialStart.minutes) : 10
          );
          break;
      }
    }

    // cancel
    if (initialCancel === 'NONE' || !initialCancel) {
      setCancelMode('NONE');
      setCancelSelected([]);
    } else if (typeof initialCancel === 'object' && initialCancel.mode === 'CANCEL_IF_ANY_SELECTED_CANCELLED') {
      setCancelMode('CANCEL_IF_ANY_SELECTED_CANCELLED');
      setCancelSelected([...new Set(initialCancel.selectedEdges || [])]);
    }
  }, [initialStart, initialCancel, open]);

  const toggleArr = (arr: string[], id: string) =>
    arr.includes(id) ? arr.filter((x) => x !== id) : [...arr, id];

  if (!open) return null;

  return (
    <div className="modal-scrim" onClick={onClose}>
      <div className="modal" onClick={(e) => e.stopPropagation()} style={{ maxWidth: 520 }}>
        <div className="modal-header">
          <b>‚öôÔ∏è –£—Å–ª–æ–≤–∏—è —É–∑–ª–∞</b>
          <div style={{ display: 'flex', gap: 8 }}>
            <button onClick={onDelete} title="–£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª">üóëÔ∏è</button>
            <button onClick={onClose} title="–ó–∞–∫—Ä—ã—Ç—å">‚úñÔ∏è</button>
          </div>
        </div>

        {/* START */}
        <div className="modal-block">
          <div className="modal-block-title">–°—Ç–∞—Ä—Ç</div>
          {[
            ['AFTER_ANY', '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π (‚û°Ô∏è, –∑–µ–ª—ë–Ω—ã–π –ø—É–Ω–∫—Ç–∏—Ä)'],
            ['AFTER_SELECTED', '–ü–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π (—á–µ–∫–±–æ–∫—Å—ã, ‚û°Ô∏è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)'],
            ['ON_DATE', '–í –¥–∞—Ç—É (üìÖ)'],
            ['ON_DATE_AND_AFTER_SELECTED', '–í –¥–∞—Ç—É (üìÖ) + –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π'],
            ['AFTER_MINUTES_AND_AFTER_SELECTED', '–ß–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç (‚è∞) + –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π'],
          ].map(([val, label]) => (
            <label key={val} style={{ display: 'block', marginBottom: 6 }}>
              <input
                type="radio"
                name="start-mode"
                value={val}
                checked={startMode === val}
                onChange={() => setStartMode(val as any)}
              />{' '}
              {label}
            </label>
          ))}

          {/* –±–ª–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ä–µ–∂–∏–º–∞–º */}
          {startMode === 'AFTER_SELECTED' && (
            <div className="modal-subblock">
              <div className="modal-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑–∏</div>
              {prevEdges.length === 0 && <div className="muted">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π</div>}
              {prevEdges.map((e) => (
                <label key={e.id} style={{ display: 'block' }}>
                  <input
                    type="checkbox"
                    checked={startSelected.includes(e.id)}
                    onChange={() => setStartSelected((a) => toggleArr(a, e.id))}
                  />{' '}
                  {e.label}
                </label>
              ))}
            </div>
          )}

          {startMode === 'ON_DATE' && (
            <div className="modal-subblock">
              <div className="modal-subtitle">–î–∞—Ç–∞/–≤—Ä–µ–º—è</div>
              <input
                type="datetime-local"
                value={startDateLocal}
                onChange={(e) => setStartDateLocal(e.target.value)}
              />
            </div>
          )}

          {startMode === 'ON_DATE_AND_AFTER_SELECTED' && (
            <div className="modal-subblock">
              <div className="modal-subtitle">–î–∞—Ç–∞/–≤—Ä–µ–º—è</div>
              <input
                type="datetime-local"
                value={startDateLocal}
                onChange={(e) => setStartDateLocal(e.target.value)}
              />
              <div className="modal-subtitle" style={{ marginTop: 10 }}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑–∏</div>
              {prevEdges.length === 0 && <div className="muted">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π</div>}
              {prevEdges.map((e) => (
                <label key={e.id} style={{ display: 'block' }}>
                  <input
                    type="checkbox"
                    checked={startSelected.includes(e.id)}
                    onChange={() => setStartSelected((a) => toggleArr(a, e.id))}
                  />{' '}
                  {e.label}
                </label>
              ))}
            </div>
          )}

          {startMode === 'AFTER_MINUTES_AND_AFTER_SELECTED' && (
            <div className="modal-subblock">
              <div className="modal-subtitle">–ú–∏–Ω—É—Ç—ã</div>
              <input
                type="number"
                min={1}
                value={startMinutes}
                onChange={(e) => setStartMinutes(Math.max(1, Number(e.target.value || 1)))}
                style={{ width: 100 }}
              />
              <div className="modal-subtitle" style={{ marginTop: 10 }}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑–∏</div>
              {prevEdges.length === 0 && <div className="muted">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π</div>}
              {prevEdges.map((e) => (
                <label key={e.id} style={{ display: 'block' }}>
                  <input
                    type="checkbox"
                    checked={startSelected.includes(e.id)}
                    onChange={() => setStartSelected((a) => toggleArr(a, e.id))}
                  />{' '}
                  {e.label}
                </label>
              ))}
            </div>
          )}
        </div>

        {/* CANCEL */}
        <div className="modal-block">
          <div className="modal-block-title">–û—Ç–º–µ–Ω–∞</div>
          <label style={{ display: 'block', marginBottom: 6 }}>
            <input
              type="radio"
              name="cancel-mode"
              value="NONE"
              checked={cancelMode === 'NONE'}
              onChange={() => setCancelMode('NONE')}
            />{' '}
            –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å
          </label>
          <label style={{ display: 'block' }}>
            <input
              type="radio"
              name="cancel-mode"
              value="CANCEL_IF_ANY_SELECTED_CANCELLED"
              checked={cancelMode === 'CANCEL_IF_ANY_SELECTED_CANCELLED'}
              onChange={() => setCancelMode('CANCEL_IF_ANY_SELECTED_CANCELLED')}
            />{' '}
            –û—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞ (üö´)
          </label>

          {cancelMode === 'CANCEL_IF_ANY_SELECTED_CANCELLED' && (
            <div className="modal-subblock">
              <div className="modal-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑–∏</div>
              {prevEdges.length === 0 && <div className="muted">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π</div>}
              {prevEdges.map((e) => (
                <label key={e.id} style={{ display: 'block' }}>
                  <input
                    type="checkbox"
                    checked={cancelSelected.includes(e.id)}
                    onChange={() => setCancelSelected((a) => toggleArr(a, e.id))}
                  />{' '}
                  {e.label}
                </label>
              ))}
            </div>
          )}
        </div>

        {/* ACTIONS */}
        <div className="modal-actions">
          <button
            onClick={() => {
              const toIso = (local: string) => (local ? new Date(local).toISOString() : '');
              // —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç
              let startOut: StartCondition = 'AFTER_ANY';
              if (startMode === 'AFTER_ANY') {
                startOut = 'AFTER_ANY';
              } else if (startMode === 'AFTER_SELECTED') {
                startOut = { mode: 'AFTER_SELECTED', selectedEdges: startSelected };
              } else if (startMode === 'ON_DATE') {
                startOut = { mode: 'ON_DATE', date: toIso(startDateLocal) };
              } else if (startMode === 'ON_DATE_AND_AFTER_SELECTED') {
                startOut = { mode: 'ON_DATE_AND_AFTER_SELECTED', date: toIso(startDateLocal), selectedEdges: startSelected };
              } else if (startMode === 'AFTER_MINUTES_AND_AFTER_SELECTED') {
                startOut = { mode: 'AFTER_MINUTES_AND_AFTER_SELECTED', minutes: startMinutes, selectedEdges: startSelected };
              }

              // —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–º–µ–Ω—É
              let cancelOut: CancelCondition = 'NONE';
              if (cancelMode === 'CANCEL_IF_ANY_SELECTED_CANCELLED') {
                cancelOut = { mode: 'CANCEL_IF_ANY_SELECTED_CANCELLED', selectedEdges: cancelSelected };
              }

              onSave({ start: startOut, cancel: cancelOut });
            }}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
          <button onClick={onClose}>–û—Ç–º–µ–Ω–∞</button>
        </div>
      </div>
    </div>
  );
}
