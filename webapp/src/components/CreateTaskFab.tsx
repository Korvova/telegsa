// webapp/src/components/CreateTaskFab.tsx
import { useEffect, useMemo, useRef, useState } from 'react';
import CameraCaptureModal from './CameraCaptureModal'; // ‚¨ÖÔ∏è NEW

import WebApp from '@twa-dev/sdk';
import {
  createTask,
  listGroups,
  type Group,
  getGroupMembers,
  type GroupMember,
    uploadTaskMedia, 
} from '../api';

type Props = {
  /** –ì—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –µ—Å–ª–∏ –ø—Ä–æ–ø –ø–µ—Ä–µ–¥–∞–Ω (–¥–∞–∂–µ null) ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–±–∞–Ω–∞ */
  defaultGroupId?: string | null;
  /** –ö—Ç–æ —Å–æ–∑–¥–∞—ë—Ç (chatId —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) */
  chatId: string;
  /** –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –Ω–µ –±—É–¥–µ–º –¥–µ—Ä–≥–∞—Ç—å API) */
  groups?: Group[];
  /** –ö–æ–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è */
  onCreated?: () => void;
};

type MemberOption = { chatId: string; name: string };

export default function CreateTaskFab({
  defaultGroupId = null,
  chatId,
  groups: groupsProp,
  onCreated,
}: Props) {
  const [open, setOpen] = useState(false);

  // –µ—Å–ª–∏ –ø—Ä–æ–ø defaultGroupId –ø–µ—Ä–µ–¥–∞–Ω (–≤ —Ç.—á. null) ‚Äî –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–±–∞–Ω–∞ –∏ –∑–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
  const isSimpleMode = useMemo(
    () => typeof defaultGroupId !== 'undefined',
    [defaultGroupId],
  );

  // –º–∞—Å—Ç–µ—Ä-—Ä–µ–∂–∏–º: 0 ‚Äî —Ç–µ–∫—Å—Ç, 1 ‚Äî –≥—Ä—É–ø–ø–∞, 2 ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
  const [step, setStep] = useState<0 | 1 | 2>(0);

  const [text, setText] = useState('');
  const [busy, setBusy] = useState(false);

  const [groups, setGroups] = useState<Group[]>(groupsProp || []);
  const [groupId, setGroupId] = useState<string | null>(defaultGroupId ?? null);

  const [members, setMembers] = useState<MemberOption[]>([]);













// –ü–û–°–õ–ï:
const [assignee, setAssignee] = useState<string | null>(null);

// NEW: –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
const [pickerOpen, setPickerOpen] = useState(false);

// NEW: —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
const groupLabel = () => {
  if (!groupId) return '–ú–æ—è –≥—Ä—É–ø–ø–∞';
  const g = groups.find(g => g.id === groupId);
  return g ? g.title : '–ì—Ä—É–ø–ø–∞';
};









// ‚¨áÔ∏è NEW: –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
const [pendingFiles, setPendingFiles] = useState<File[]>([]);
const fileAnyRef = useRef<HTMLInputElement | null>(null);
const filePhotoRef = useRef<HTMLInputElement | null>(null);

const [cameraOpen, setCameraOpen] = useState(false); // ‚¨ÖÔ∏è NEW




// NEW: —Ç–∞–±—ã "–º–æ–∏ / —Å–æ –º–Ω–æ–π" –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
const [groupTab, setGroupTab] = useState<'own' | 'member'>('own');

const ownGroups = useMemo(
  () => groups.filter((g) => g.kind === 'own'),
  [groups]
);
const memberGroups = useMemo(
  () => groups.filter((g) => g.kind === 'member'),
  [groups]
);






const onPickFiles = (files: FileList | null) => {
  if (!files || !files.length) return;
  const arr = Array.from(files).slice(0, 10);
  setPendingFiles((prev) => [...prev, ...arr]);
};

const openCamera = () => {
  // –µ—Å–ª–∏ –µ—Å—Ç—å getUserMedia ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –∫–∞–º–µ—Ä—É; –∏–Ω–∞—á–µ ‚Äî —Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ input
  const hasGUM = typeof (navigator as any)?.mediaDevices?.getUserMedia === 'function';
  if (hasGUM) {
    setCameraOpen(true);
  } else {
    filePhotoRef.current?.click();
  }
};





  // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  useEffect(() => {
    if (groupsProp && groupsProp.length) {
      setGroups(groupsProp);
      return;
    }
    if (!chatId) return;
    listGroups(chatId)
      .then((r) => {
        if (r.ok) setGroups(r.groups);
      })
      .catch(() => {});
  }, [chatId, groupsProp]);

  // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (–∏–ª–∏ —Å–∞–º —Å–µ–±—è –¥–ª—è ‚Äú–ú–æ–µ–π –≥—Ä—É–ø–ø—ã‚Äù)
  useEffect(() => {
    let cancelled = false;

    async function loadMembers() {
      setAssignee(null);

      // –ú–æ—è –≥—Ä—É–ø–ø–∞ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π ‚Äú—É—á–∞—Å—Ç–Ω–∏–∫‚Äù —ç—Ç–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!groupId) {
        const meName =
          WebApp?.initDataUnsafe?.user
            ? [WebApp.initDataUnsafe.user.first_name, WebApp.initDataUnsafe.user.last_name]
                .filter(Boolean)
                .join(' ')
            : String(chatId);
        if (!cancelled) {
          setMembers([{ chatId, name: meName || String(chatId) }]);
        }
        return;
      }

      try {
        const r = await getGroupMembers(groupId);
        if (!r.ok) throw new Error('members_load_failed');

        const owner = r.owner ? [r.owner] : [];
        const raw: GroupMember[] = [...owner, ...(r.members || [])];

        // —É–±–µ—Ä—ë–º –¥—É–±–ª–∏ –ø–æ chatId, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
        const uniq = new Map<string, MemberOption>();
        raw.forEach((m) => {
          if (!m?.chatId) return;
          const nm = (m.name || String(m.chatId)).trim();
          uniq.set(String(m.chatId), { chatId: String(m.chatId), name: nm || String(m.chatId) });
        });

        if (!cancelled) {
          const arr = Array.from(uniq.values());
          setMembers(arr.length ? arr : [{ chatId, name: '–Ø' }]);
        }
      } catch {
        if (!cancelled) setMembers([{ chatId, name: '–Ø' }]);
      }
    }

    // –∑–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ä–∞–∑—É –∏ –ø—Ä–∏ —Å–º–µ–Ω–µ groupId
    loadMembers();
    return () => {
      cancelled = true;
    };
  }, [groupId, chatId]);

  const openModal = () => {
    setOpen(true);
    setStep(0);
  };

 const closeModal = () => {
  setOpen(false);
  setBusy(false);
  setText('');
  setAssignee(null);
  setGroupId(defaultGroupId ?? null);
  setPendingFiles([]); // ‚¨ÖÔ∏è NEW
};


  // PATCH –∞—Å—Åignee —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è

async function patchAssignee(taskId: string, assigneeChatId: string | null) {
  const API = (import.meta as any).env.VITE_API_BASE || '';
  const me = String(WebApp?.initDataUnsafe?.user?.id || chatId);

  try {
    await fetch(`${API}/tasks/${encodeURIComponent(taskId)}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        assigneeChatId,
        actorChatId: me, // üëà –∫—Ç–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç
      }),
    });
  } catch (e) {
    console.warn('[CreateTaskFab] patchAssignee failed', e);
  }
}


const submit = async () => {
  const val = text.trim();
  if (!val || busy) return;
  setBusy(true);
  try {
    const r = await createTask(chatId, val, groupId ?? undefined);
    if (!r?.ok || !r?.task?.id) throw new Error('create_failed');
    const taskId = r.task.id;

    if (assignee) {
      await patchAssignee(taskId, assignee);
    }

    // ‚¨áÔ∏è NEW: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∏—Ö –≤ Telegram —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
    if (pendingFiles.length) {
      for (const f of pendingFiles) {
        try {
          await uploadTaskMedia(taskId, chatId, f);
        } catch (e) {
          console.warn('[CreateTaskFab] uploadTaskMedia error', e);
        }
      }
    }

    WebApp?.HapticFeedback?.notificationOccurred?.('success');
    onCreated?.();       // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏
    closeModal();        // –æ—á–∏—Å—Ç–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  } catch (e) {
    console.error('[CreateTaskFab] createTask error', e);
    WebApp?.HapticFeedback?.notificationOccurred?.('error');
    setBusy(false);
  }
};


  // –º–∞—Å—Ç–µ—Ä-—Ä–µ–∂–∏–º: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º
  const next = () => {
    if (step === 0) {
      if (!text.trim()) return;
      setStep(isSimpleMode ? 0 : 1); // –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ—Ç —à–∞–≥–æ–≤ ‚Äî —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º
      if (isSimpleMode) submit();
      return;
    }
    if (step === 1) {
      setStep(2);
      return;
    }
    if (step === 2) {
      submit();
    }
  };

  const back = () => {
    if (isSimpleMode) {
      closeModal();
      return;
    }
    if (step === 0) {
      closeModal();
      return;
    }
    setStep((s) => (s === 2 ? 1 : 0));
  };

  // ---------- UI ----------
  return (
    <>
      {/* FAB [+] */}
      <button
        onClick={openModal}
        aria-label="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
        style={{
          position: 'fixed',
          right: 16,
          bottom: `calc(84px + env(safe-area-inset-bottom, 0px))`,
          width: 56,
          height: 56,
          borderRadius: 28,
          background: '#2563eb',
          color: '#fff',
          border: 'none',
          boxShadow: '0 10px 24px rgba(0,0,0,.35)',
          fontSize: 28,
          lineHeight: '56px',
          textAlign: 'center',
          cursor: 'pointer',
          zIndex: 50,
        }}
      >
        +
      </button>

      {/* –ú–æ–¥–∞–ª–∫–∞ */}
            {/* –ú–æ–¥–∞–ª–∫–∞ */}
      {open && (
        <div
          onClick={closeModal}
          style={{
            position: 'fixed',
            inset: 0,
            background: 'rgba(0,0,0,.45)',
            zIndex: 1000,
            display: 'flex',
            alignItems: 'flex-end',
            justifyContent: 'center',
          }}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              width: '100%',
              maxWidth: 640,
              background: '#111827',
              color: '#e5e7eb',
              borderTopLeftRadius: 16,
              borderTopRightRadius: 16,
              padding: 16,
              borderTop: '1px solid #1f2937', // ‚úÖ —Ñ–∏–∫—Å –∫–∞–≤—ã—á–µ–∫
            }}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}


            
     <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
  <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
    <div style={{ fontWeight: 700 }}>
      {isSimpleMode ? '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞' : step === 0 ? '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏' : step === 1 ? '–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã' : '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'}
    </div>

    {/* NEW: —á–∏–ø –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ */}
    {isSimpleMode && (
      <button
        onClick={() => setPickerOpen(true)}
        title="–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É"
        style={{
          padding: '4px 8px',
          borderRadius: 999,
          border: '1px solid #2a3346',
          background: '#202840',
          color: '#e8eaed',
          fontSize: 12,
          cursor: 'pointer'
        }}
      >
      <div style={{ fontSize: 12, opacity: 0.85 }}>
  –ì—Ä—É–ø–ø–∞: <b>{groupLabel()}</b>
  <span style={{ opacity: 0.8 }}> </span>
</div>
      </button>
    )}
  </div>
              <button
                onClick={closeModal}
                style={{ background: 'transparent', border: 'none', color: '#9ca3af', fontSize: 18, cursor: 'pointer' }}
                aria-label="–ó–∞–∫—Ä—ã—Ç—å"
              >
                ‚úï
              </button>
            </div>





            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            {isSimpleMode ? (
              // –ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú (–≤ –∫–∞–Ω–±–∞–Ω–µ): –æ–¥–∏–Ω —ç–∫—Ä–∞–Ω ‚Äî —Ç–µ–∫—Å—Ç + –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
              <>
                <div style={{ display: 'grid', gap: 10, marginBottom: 10 }}>
  {/* NEW: —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞ –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ */}

                  <textarea
                    autoFocus
                    rows={4}
                    placeholder="–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É‚Ä¶"
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    style={{
                      width: '95%',
                      background: '#0b1220',
                      color: '#e5e7eb',
                      border: '1px solid #1f2937',
                      borderRadius: 12,
                      padding: 10,
                      resize: 'vertical',
                    }}
                  />




                  <div>
                    <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 6 }}>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</div>
                    <select
                      value={assignee ?? ''}
                      onChange={(e) => setAssignee(e.target.value || null)}
                      style={{
                        width: '100%',
                        background: '#0b1220',
                        color: '#e5e7eb',
                        border: '1px solid #1f2937',
                        borderRadius: 10,
                        padding: '8px 10px',
                      }}
                    >
                      <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å</option>
                      {members.map((m) => (
                        <option key={m.chatId} value={m.chatId}>
                          {m.name || m.chatId}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                {/* NEW: –ø–∞–Ω–µ–ª—å –≤–ª–æ–∂–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ–∏ÃÜ —Ä–µ–∂–∏–º) */}
                <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
                  <button
                    type="button"
                    onClick={() => fileAnyRef.current?.click()}
                    title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
                    style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
                  >
                    @
                  </button>

                  {/* üì∏ ‚Äî —Å–∏—Å—Ç–µ–º–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è / –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ */}
                  <button
                    type="button"
                    onClick={() => filePhotoRef.current?.click()}
                    title="–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ"
                    style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
                  >
                    üì∏
                  </button>

                  {/* üé• ‚Äî –ù–ê–®–ê –∫–∞–º–µ—Ä–∞ (getUserMedia) */}
                  <button
                    type="button"
                    onClick={openCamera}
                    title="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É"
                    style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
                  >
                    üé•
                  </button>

                  {/* —Å–∫—Ä—ã—Ç—ã–µ –∏–Ω–ø—É—Ç—ã */}
                  <input
                    ref={fileAnyRef}
                    type="file"
                    multiple
                    style={{ display: 'none' }}
                    onChange={(e) => onPickFiles(e.target.files)}
                  />
                  <input
                    ref={filePhotoRef}
                    type="file"
                    accept="image/*"
                    capture="environment"
                    style={{ display: 'none' }}
                    onChange={(e) => onPickFiles(e.target.files)}
                  />
                </div>

                {/* NEW: –º–∏–Ω–∏-—Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
                {pendingFiles.length ? (
                  <div style={{ marginTop: 6, fontSize: 12, opacity: 0.85 }}>
                    –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {pendingFiles.map((f) => f.name || '—Ñ–∞–π–ª').join(', ')}
                  </div>
                ) : null}

                <div style={{ display: 'flex', gap: 8, justifyContent: 'space-between', marginTop: 10 }}>
                  <button
                    onClick={back}
                    disabled={busy}
                    style={{
                      padding: '10px 14px',
                      borderRadius: 12,
                      background: '#1f2937',
                      color: '#e5e7eb',
                      border: '1px solid #374151',
                      cursor: 'pointer',
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={submit}
                    disabled={busy || !text.trim()}
                    style={{
                      padding: '10px 14px',
                      borderRadius: 12,
                      background: '#2563eb',
                      color: '#fff',
                      border: '1px solid transparent', // ‚úÖ —Ñ–∏–∫—Å –∫–∞–≤—ã—á–µ–∫
                      cursor: 'pointer',
                      minWidth: 120,
                    }}
                  >
                    {busy ? '–°–æ–∑–¥–∞—é‚Ä¶' : '–°–æ–∑–¥–∞—Ç—å'}
                  </button>
                </div>
              </>
            ) : (
              // –ú–ê–°–¢–ï–† (–≤–Ω–µ –∫–∞–Ω–±–∞–Ω–∞)
              <>
                {step === 0 && (
                  <div style={{ display: 'grid', gap: 10 }}>
                    <textarea
                      autoFocus
                      rows={5}
                      placeholder="–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É‚Ä¶"
                      value={text}
                      onChange={(e) => setText(e.target.value)}
                      style={{
                        width: '100%',
                        background: '#0b1220',
                        color: '#e5e7eb',
                        border: '1px solid #1f2937',
                        borderRadius: 12,
                        padding: 10,
                        resize: 'vertical',
                      }}
                    />

                    {/* NEW: –ø–∞–Ω–µ–ª—å –≤–ª–æ–∂–µ–Ω–∏–π (–º–∞—Å—Ç–µ—Ä, —à–∞–≥ 0) */}
                    <div style={{ display: 'flex', gap: 8 }}>
                      <button
                        type="button"
                        onClick={() => fileAnyRef.current?.click()}
                        title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
                        style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
                      >
                        @
                      </button>
                      <button
                        type="button"
                        onClick={() => filePhotoRef.current?.click()}
                        title="–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ"
                        style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
                      >
                        üì∏
                      </button>
                      <button
                        type="button"
                        onClick={openCamera}
                        title="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É"
                        style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
                      >
                        üé•
                      </button>

                      {/* —Å–∫—Ä—ã—Ç—ã–µ –∏–Ω–ø—É—Ç—ã */}
                      <input
                        ref={fileAnyRef}
                        type="file"
                        multiple
                        style={{ display: 'none' }}
                        onChange={(e) => onPickFiles(e.target.files)}
                      />
                      <input
                        ref={filePhotoRef}
                        type="file"
                        accept="image/*"
                        capture="environment"
                        style={{ display: 'none' }}
                        onChange={(e) => onPickFiles(e.target.files)}
                      />
                    </div>

                    {/* NEW: –º–∏–Ω–∏-—Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
                    {pendingFiles.length ? (
                      <div style={{ fontSize: 12, opacity: 0.85 }}>
                        –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {pendingFiles.map((f) => f.name || '—Ñ–∞–π–ª').join(', ')}
                      </div>
                    ) : null}
                  </div>
                )}

                {step === 1 && (
                  <div style={{ display: 'grid', gap: 10 }}>
                    <div style={{ fontSize: 12, opacity: 0.8 }}>–ü—Ä–æ–µ–∫—Ç</div>
                    <select
                      value={groupId ?? ''}
                      onChange={(e) => setGroupId(e.target.value ? e.target.value : null)}
                      style={{
                        background: '#0b1220',
                        color: '#e5e7eb',
                        border: '1px solid #1f2937',
                        borderRadius: 10,
                        padding: '8px 10px',
                      }}
                    >
                      <option value="">–ú–æ—è –≥—Ä—É–ø–ø–∞</option>
                      {groups.map((g) => (
                        <option key={g.id} value={g.id}>
                          {g.title}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                {step === 2 && (
                  <div style={{ display: 'grid', gap: 10 }}>
                    <div style={{ fontSize: 12, opacity: 0.8 }}>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</div>
                    <select
                      value={assignee ?? ''}
                      onChange={(e) => setAssignee(e.target.value || null)}
                      style={{
                        background: '#0b1220',
                        color: '#e5e7eb',
                        border: '1px solid #1f2937',
                        borderRadius: 10,
                        padding: '8px 10px',
                      }}
                    >
                      <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å</option>
                      {members.map((m) => (
                        <option key={m.chatId} value={m.chatId}>
                          {m.name || m.chatId}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                <div style={{ display: 'flex', gap: 8, marginTop: 14, justifyContent: 'space-between' }}>
                  <button
                    onClick={back}
                    disabled={busy}
                    style={{
                      padding: '10px 14px',
                      borderRadius: 12,
                      background: '#1f2937',
                      color: '#e5e7eb',
                      border: '1px solid #374151',
                      cursor: 'pointer',
                    }}
                  >
                    {step === 0 ? '–û—Ç–º–µ–Ω–∞' : '‚Üê –ù–∞–∑–∞–¥'}
                  </button>
                  <button
                    onClick={next}
                    disabled={busy || (step === 0 && !text.trim())}
                    style={{
                      padding: '10px 14px',
                      borderRadius: 12,
                      background: '#2563eb',
                      color: '#fff',
                      border: '1px solid transparent', // ‚úÖ —Ñ–∏–∫—Å –∫–∞–≤—ã—á–µ–∫
                      cursor: 'pointer',
                      minWidth: 120,
                    }}
                  >
                    {step < 2 ? '‚Üí –î–∞–ª–µ–µ' : busy ? '–°–æ–∑–¥–∞—é‚Ä¶' : '–°–æ–∑–¥–∞—Ç—å'}
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}








{pickerOpen && isSimpleMode && (
  <div
    onClick={() => setPickerOpen(false)}
    style={{
      position: 'fixed',
      inset: 0,
      background: 'rgba(0,0,0,.35)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1100,
    }}
  >
    <div
      onClick={(e) => e.stopPropagation()}
      style={{
        background: '#1b2030',
        color: '#e8eaed',
        border: '1px solid #2a3346',
        borderRadius: 12,
        padding: 12,
        width: 'min(460px, 92vw)',
      }}
    >
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
        <div style={{ fontWeight: 700 }}>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</div>
        <button
          onClick={() => setPickerOpen(false)}
          style={{ background: 'transparent', border: 'none', color: '#8aa0ff', cursor: 'pointer' }}
        >
          ‚úï
        </button>
      </div>

      {/* NEW: —Ç–∞–±—ã */}
      <div style={{ display: 'flex', gap: 8, marginBottom: 10 }}>
        <button
          onClick={() => setGroupTab('own')}
          style={{
            padding: '6px 10px',
            borderRadius: 999,
            border: '1px solid #2a3346',
            background: groupTab === 'own' ? '#1b2030' : '#121722',
            color: groupTab === 'own' ? '#8aa0ff' : '#e8eaed',
            cursor: 'pointer',
          }}
        >
          –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã ({ownGroups.length})
        </button>
        <button
          onClick={() => setGroupTab('member')}
          style={{
            padding: '6px 10px',
            borderRadius: 999,
            border: '1px solid #2a3346',
            background: groupTab === 'member' ? '#1b2030' : '#121722',
            color: groupTab === 'member' ? '#8aa0ff' : '#e8eaed',
            cursor: 'pointer',
          }}
        >
          –ü—Ä–æ–µ–∫—Ç—ã —Å–æ –º–Ω–æ–π ({memberGroups.length})
        </button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∞–±—É */}
      <div style={{ display: 'grid', gap: 8, maxHeight: '50vh', overflow: 'auto' }}>
        {/* –õ–∏—á–Ω–∞—è –¥–æ—Å–∫–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ¬´–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã¬ª */}
        {groupTab === 'own' && (
          <label style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
            <input
              type="radio"
              name="group"
              checked={!groupId}
              onChange={() => setGroupId(null)}
            />
            <span>–ú–æ—è –≥—Ä—É–ø–ø–∞ (–ª–∏—á–Ω–∞—è –¥–æ—Å–∫–∞)</span>
          </label>
        )}

{groupTab === 'own'
  ? ownGroups.map((g) => (
      <label key={g.id} style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <input
          type="radio"
          name="group"
          checked={groupId === g.id}
          onChange={() => setGroupId(g.id)}
        />
        <span>{g.title}</span>
      </label>
    ))
  : memberGroups.map((g) => (
      <label key={g.id} style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <input
          type="radio"
          name="group"
          checked={groupId === g.id}
          onChange={() => setGroupId(g.id)}
        />
        <span>
          {g.title}
          {g.ownerName && (
            <span style={{ opacity: 0.7, marginLeft: 6 }}>
              (üëë {g.ownerName})
            </span>
          )}
        </span>
      </label>
    ))}


      </div>

      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 8, marginTop: 10 }}>
        <button
          onClick={() => setPickerOpen(false)}
          style={{
            padding: '8px 12px',
            borderRadius: 10,
            border: '1px solid #2a3346',
            background: '#202840',
            color: '#e8eaed',
          }}
        >
          –ì–æ—Ç–æ–≤–æ
        </button>
      </div>
    </div>
  </div>
)}







      {/* NEW: –º–æ–¥–∞–ª–∫–∞ –∫–∞–º–µ—Ä—ã (–¥–ª—è –ª—é–±–æ–≥–æ —Ä–µ–∂–∏–º–∞) */}
      <CameraCaptureModal
        open={cameraOpen}
        onClose={() => setCameraOpen(false)}
        onCapture={(file) => setPendingFiles((prev) => [...prev, file])}
      />
    </>
  );
}
