// src/TaskView.tsx

import { useEffect, useMemo, useRef, useState } from 'react';
import WebApp from '@twa-dev/sdk';
import type { Task, TaskMedia } from './api';
import { listGroups, API_BASE, fetchBoard, moveTask, type Group } from './api';

import ResponsibleActions from './components/ResponsibleActions';
import CommentsThread from './components/CommentsThread';
import EventPanel from './components/EventPanel';
import ShareNewTaskMenu from './components/ShareNewTaskMenu';

import { createPortal } from 'react-dom';






import {
  getTask,
  getTaskWithGroup,
  updateTask,
  completeTask,
  reopenTask,
  deleteTask,
  // —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã
  type GroupMember,
  getGroupMembers,
} from './api';

type Props = {
  taskId: string;
  onClose: (groupId?: string | null) => void;
  onChanged: () => void;
};

export default function TaskView({ taskId, onClose, onChanged }: Props) {
  const [loading, setLoading] = useState(true);
  const [task, setTask] = useState<Task | null>(null);
  const [text, setText] = useState('');
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [phase, setPhase] = useState<string | undefined>(undefined);
  const isDone = phase === 'Done';



// —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
const [allGroups, setAllGroups] = useState<Group[]>([]);

// —Ç–∞–±—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
const [groupPickerOpen, setGroupPickerOpen] = useState(false);
const [groupTab, setGroupTab] = useState<'own' | 'member'>('own');

const ownGroups = useMemo(() => allGroups.filter(g => g.kind === 'own'), [allGroups]);
const memberGroups = useMemo(() => allGroups.filter(g => g.kind === 'member'), [allGroups]);



const [isClosing, setIsClosing] = useState(false);
const [thumbStage, setThumbStage] = useState<0 | 1 | 2>(0); // 0=—Å–∫—Ä—ã—Ç, 1=–ø–æ—è–≤–ª–µ–Ω–∏–µ, 2=–∑–∞—Ç—É—Ö–∞–Ω–∏–µ



  // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
  const [groupTitle, setGroupTitle] = useState<string | null>(null);
  const [groupId, setGroupId] = useState<string | null>(null);

  // –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const groupIdRef = useRef<string | null | undefined>(undefined);

  // –º—è–≥–∫–∏–π ¬´—Ç–∏–∫¬ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  const [refreshTick, setRefreshTick] = useState(0);

  // –∫—Ç–æ —è (–¥–ª—è ¬´–°–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–µ–±—è¬ª)
  const meChatId = String(
    WebApp?.initDataUnsafe?.user?.id ||
      new URLSearchParams(window.location.search).get('from') ||
      ''
  );



const [media, setMedia] = useState<TaskMedia[]>([]);




// NEW: –¥–ª—è –º–æ–¥–∞–ª–∫–∏ —Å —Ñ–æ—Ç–æ
const photos = useMemo(() => media.filter(m => m.kind === 'photo'), [media]);
const [isLightboxOpen, setLightboxOpen] = useState(false);
const [lightboxIndex, setLightboxIndex] = useState(0);






const cardRef = useRef<HTMLDivElement | null>(null);

// –∫—É–¥–∞ ¬´—Ç—è–Ω—É—Ç—å¬ª –∫–∞—Ä—Ç–æ—á–∫—É (–≤ –ø–∏–∫—Å–µ–ª—è—Ö) –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
const [pull, setPull] = useState<{ x: number; y: number }>({ x: 0, y: 0 });






  // —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã (–¥–ª—è ¬´–í—ã–±—Ä–∞—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã¬ª)
  const [members, setMembers] = useState<GroupMember[]>([]);

  // –∫–æ–≥–¥–∞ —É–∑–Ω–∞–ª–∏ groupId ‚Äî –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  useEffect(() => {
    if (!groupId) return;
    getGroupMembers(groupId)
      .then((r) => {
        if (r.ok) setMembers(r.members || []);
      })
      .catch(() => {});
  }, [groupId]);






useEffect(() => {
  if (!isLightboxOpen) return;
  const onKey = (e: KeyboardEvent) => {
    if (e.key === 'Escape') setLightboxOpen(false);
    if (e.key === 'ArrowRight') setLightboxIndex(i => (i + 1) % Math.max(photos.length, 1));
    if (e.key === 'ArrowLeft') setLightboxIndex(i => (i - 1 + Math.max(photos.length, 1)) % Math.max(photos.length, 1));
  };
  window.addEventListener('keydown', onKey);
  return () => window.removeEventListener('keydown', onKey);
}, [isLightboxOpen, photos.length]);



const groupLabel = () => groupTitle || '–ú–æ—è –≥—Ä—É–ø–ø–∞';



  /* --- —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" --- */
  useEffect(() => {
    const onceRef = { done: false, t: 0 as any };

    const handle = () => {
      if (onceRef.done) return;
      onceRef.done = true;
      clearTimeout(onceRef.t);
      onceRef.t = setTimeout(() => (onceRef.done = false), 300);
      onClose(groupIdRef.current);
    };

    try { WebApp?.BackButton?.show?.(); } catch {}
    WebApp?.onEvent?.('backButtonClicked', handle);
    WebApp?.BackButton?.onClick?.(handle);

    return () => {
      WebApp?.offEvent?.('backButtonClicked', handle);
      WebApp?.BackButton?.offClick?.(handle);
      try { WebApp?.BackButton?.hide?.(); } catch {}
    };
  }, [onClose]);

  /* --- –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á–∏ + –≥—Ä—É–ø–ø—ã/—Ñ–∞–∑—ã --- */
  useEffect(() => {
    let ignore = false;
    setLoading(true);

    getTask(taskId)
      .then(async (tResp) => {
        if (ignore) return;
        setTask(tResp.task);
        setText(tResp.task.text);
        try {



const gResp = await getTaskWithGroup(taskId);
groupIdRef.current = gResp?.groupId ?? null;
setGroupId(groupIdRef.current);
setPhase(gResp?.phase);
setMedia(Array.isArray(gResp?.media) ? gResp.media : []);




        } catch {
          const gid = new URLSearchParams(location.search).get('group');
          groupIdRef.current = gid || null;
          setGroupId(groupIdRef.current);
          setPhase(undefined);
        }
      })
      .catch(() => {
        const gid = new URLSearchParams(location.search).get('group');
        groupIdRef.current = gid || null;
        setGroupId(groupIdRef.current);
        setTask(null);
      })
      .finally(() => !ignore && setLoading(false));

    return () => { ignore = true; };
  }, [taskId]);

  /* --- –ø–æ–¥—Ç—è–Ω—É—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ groupId --- */
  useEffect(() => {
    if (!groupId) {
      setGroupTitle(null);
      return;
    }
    const me =
      WebApp?.initDataUnsafe?.user?.id ||
      new URLSearchParams(location.search).get('from');
    if (!me) return;

listGroups(String(me))
  .then((r) => {
    if (r.ok) {
      setAllGroups(r.groups || []);
      const g = r.groups.find((x: any) => x.id === groupId);
      setGroupTitle(g ? g.title : null);
    }
  })
      .catch(() => {});
  }, [groupId]);

  /* --- –º—è–≥–∫–∏–π –ø–æ–ª–ª–∏–Ω–≥ (–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ/—Ñ–∞–∑—É) --- */
  useEffect(() => {
    let t: any = null;
    let alive = true;

    const tick = async () => {
      try {
        const r = await getTask(taskId);
        if (!alive) return;
        setTask(r.task);
        if (typeof (r as any)?.phase === 'string') setPhase((r as any).phase);
      } catch {}
      t = setTimeout(tick, 4000);
    };

    t = setTimeout(tick, 4000);
    return () => { alive = false; clearTimeout(t); };
  }, [taskId, refreshTick]);





// –ü–ª–∞–≤–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ üëç –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∫–∞–Ω–±–∞–Ω

const animateCloseWithThumb = (finalGroupId?: string | null) => {
  // 0) —Å–Ω–∏–º–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
  setIsClosing(false);
  setPull({ x: 0, y: 0 });
  setThumbStage(0);

  // 1) –ø–æ–∫–∞–∑–∞—Ç—å üëç –ø–æ —Ü–µ–Ω—Ç—Ä—É (—Å–ª–µ–≥–∫–∞ ¬´–≤–ø—Ä—ã–≥–∏–≤–∞–µ—Ç¬ª)
  setThumbStage(1);

  // 2) —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π –ª–∞–≥ –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—è–≥–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ üëç
  setTimeout(() => {
    const el = cardRef.current;
    if (el) {
      const r = el.getBoundingClientRect();
      const cx = r.left + r.width / 2;
      const cy = r.top + r.height / 2;

      const vw = window.innerWidth;
      const vh = window.innerHeight;
      const centerX = vw / 2;
      const centerY = vh / 2;

      setPull({
        x: centerX - cx,
        y: centerY - cy,
      });
    }
    setIsClosing(true);
  }, 120); // –∫–∞—Ä—Ç–æ—á–∫–∞ ¬´–∑–µ–ª–µ–Ω–µ–µ—Ç¬ª, –∑–∞—Ç–µ–º —Å—Ç–∞—Ä—Ç ¬´–≤—Å–∞—Å—ã–≤–∞–Ω–∏—è¬ª

  // 3) üëç –¥–µ–ª–∞–µ—Ç ¬´–±—É–º¬ª ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å—á–µ–∑–∞—Ç—å
  setTimeout(() => {
    setThumbStage(2);
  }, 620);

  // 4) –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  setTimeout(() => {
    setThumbStage(0);
    setIsClosing(false);
    setPull({ x: 0, y: 0 });
    onClose(finalGroupId ?? groupIdRef.current);
  }, 920);
};








// –ø–µ—Ä–µ–Ω–æ—Å –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É: –Ω–∞—Ö–æ–¥–∏–º Inbox —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã, –¥–≤–∏–≥–∞–µ–º —á–µ—Ä–µ–∑ /tasks/:id/move
const moveToGroup = async (targetGroupId: string | null) => {
  const by = meChatId;
  try {
    // 1) –ø–æ–ª—É—á–∞–µ–º –±–æ—Ä–¥—É —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–æ–ª–æ–Ω–∫—É Inbox
    const board = await fetchBoard(by, targetGroupId ?? undefined);
    const columns = board?.columns || [];
    // –∏—â–µ–º Inbox (–Ω–∞ –±—ç–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è; –∏–º—è 'Inbox')
    const inbox = columns.find(c => String(c.name).toLowerCase() === 'inbox') || columns[0];
    if (!inbox) throw new Error('no_inbox');

    // 2) –¥–≤–∏–≥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –Ω–∞—á–∞–ª–æ Inbox —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    await moveTask(taskId, inbox.id, 0);

    // 3) –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º
    groupIdRef.current = targetGroupId ?? null;
    setGroupId(groupIdRef.current);

// –ø–æ–¥—Ç—è–Ω–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
if (targetGroupId) {
  const g = allGroups.find(x => x.id === targetGroupId);
  setGroupTitle(g ? g.title : null);
} else {
  setGroupTitle(null);
}

    // —á—Ç–æ–±—ã UI –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
    setRefreshTick(t => t + 1);
    WebApp?.HapticFeedback?.impactOccurred?.('light');
  } catch (e) {
    console.error('[TaskView] moveToGroup error', e);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É');
  } finally {
    setGroupPickerOpen(false);
  }
};
















  /* --- –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π --- */
  const save = async () => {
    const val = text.trim();
    if (!val) return;
    setSaving(true);
    try {
      await updateTask(taskId, val);
      onChanged?.();
      WebApp?.HapticFeedback?.impactOccurred?.('light');
    } catch (e: any) {
      setError(e?.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } finally {
      setSaving(false);
    }
  };

const toggleDone = async () => {
  setSaving(true);
  try {
    if (isDone) {
      await reopenTask(taskId);
      setPhase('Doing');
      onChanged?.();
      WebApp?.HapticFeedback?.impactOccurred?.('medium');
    } else {
await completeTask(taskId);
setPhase('Done');
onChanged?.();
WebApp?.HapticFeedback?.notificationOccurred?.('success');

// –¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫–µ "–ø–æ–∑–µ–ª–µ–Ω–µ—Ç—å" 140‚Äì180–º—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
setTimeout(() => {
  animateCloseWithThumb(groupIdRef.current);
}, 160);

return; // –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º saving –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    }
  } catch (e: any) {
    setError(e?.message || '–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏');
  } finally {
    setSaving(false);
  }
};






  const handleDelete = async () => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) return;
    try {
      const resp = await deleteTask(taskId);
      const gid = (resp && 'groupId' in resp) ? (resp as any).groupId : groupIdRef.current;
      onChanged?.();
      WebApp?.HapticFeedback?.notificationOccurred?.('success');
      onClose(gid ?? undefined);
    } catch (e) {
      console.error('[DELETE] error', e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É');
      WebApp?.HapticFeedback?.notificationOccurred?.('error');
    }
  };

  // === –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—ç—Ä —Å prepared message ===


  /* --- UI --- */
  if (loading) return <div style={{ padding: 16 }}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  if (error) return <div style={{ padding: 16, color: 'crimson' }}>{error}</div>;

  // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å ¬´–Ω–∞–∑–∞–¥¬ª –∏ –∏–º–µ–Ω–µ–º –≥—Ä—É–ø–ø—ã
  const Header = (
    <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 12 }}>
      <button
        onClick={() => onClose(groupIdRef.current)}
        style={{ background: 'transparent', color: '#8aa0ff', border: 'none', cursor: 'pointer', fontSize: 13 }}
      >
        ‚Üê –ù–∞–∑–∞–¥
      </button>
      {groupTitle && <span style={{ fontSize: 13, opacity: 0.8 }}>{groupTitle}</span>}
    </div>
  );

  if (!task) {
    return (
   

<div
  style={{
    minHeight: '100vh',
    background: '#0f1216',
    color: '#e8eaed',
    padding: 16,
    transition: 'opacity 360ms ease, transform 360ms ease, filter 360ms ease',
    opacity: isClosing ? 0 : 1,
    transform: isClosing ? 'scale(0.92)' : 'scale(1)',
    filter: isClosing ? 'blur(2px)' : 'none',
  }}
>





        {Header}

        <div style={{ background: '#1b2030', border: '1px solid #2a3346', borderRadius: 16, padding: 16 }}>
          <div style={{ fontSize: 18, marginBottom: 8 }}>–ó–∞–¥–∞—á–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞</div>
          <div style={{ opacity: 0.8, marginBottom: 16 }}>
            –≠—Ç–æ–π –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–æ—Å–∫—É.
          </div>
          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
            <button
              onClick={() => onClose(null)}
              style={{ padding: '10px 14px', borderRadius: 12, border: '1px solid #2a3346', background: '#202840', color: '#e8eaed' }}
            >
              –ú–æ—è –¥–æ—Å–∫–∞
            </button>
            {groupIdRef.current ? (
              <button
                onClick={() => onClose(groupIdRef.current)}
                style={{ padding: '10px 14px', borderRadius: 12, border: '1px solid #2a3346', background: '#1f2e4a', color: '#e8eaed' }}
              >
                –û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É
              </button>
            ) : null}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={{ minHeight: '100vh', background: '#0f1216', color: '#e8eaed', padding: 16 }}>
      {Header}

<div
  ref={cardRef}
  style={{
    background: isDone ? '#15251a' : '#1b2030',
    border: `1px solid ${isDone ? '#2c4a34' : '#2a3346'}`,
    borderRadius: 16,
    padding: 16,

    // –∞–Ω–∏–º–∞—Ü–∏—è ¬´–≤—Å–∞—Å—ã–≤–∞–Ω–∏—è¬ª
    transition:
      'transform 520ms cubic-bezier(.2,.9,.2,1), opacity 520ms ease, filter 520ms ease',
    transformOrigin: '50% 50%',
    transform: isClosing
      ? `translate(${pull.x}px, ${pull.y}px) scale(0.72)`
      : 'translate(0,0) scale(1)',
    opacity: isClosing ? 0 : 1,
    filter: isClosing ? 'blur(2px)' : 'none',
  }}
>

     



<div style={{ display:'flex', alignItems:'center', justifyContent:'space-between', marginBottom: 8 }}>
  <div style={{ fontSize: 14, opacity: 0.85 }}>
    {(() => {
      const creator = (task as any)?.creatorName;
      if (task?.type === 'EVENT') {
        return creator
          ? <>–°–æ–±—ã—Ç–∏–µ –æ—Ç: <span style={{ color: '#8aa0ff', opacity: 1 }}>{creator}</span></>
          : '–°–æ–±—ã—Ç–∏–µ';
      }
      return creator
        ? <>–ó–∞–¥–∞—á–∞ –æ—Ç: <span style={{ color: '#8aa0ff', opacity: 1 }}>{creator}</span></>
        : '–ó–∞–¥–∞—á–∞';
    })()}
  </div>

  {task?.id ? (
    <ShareNewTaskMenu
      taskId={task.id}
      isEvent={task?.type === 'EVENT'}
      onDelete={handleDelete}
    />
  ) : null}
</div>




{/* –ì—Ä—É–ø–ø–∞ */}
<div style={{ margin: '6px 0 10px', fontSize: 13, opacity: .85 }}>
  –ì—Ä—É–ø–ø–∞:{' '}
  <button
    onClick={() => setGroupPickerOpen(true)}
    title="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É"
    style={{
      background: 'transparent',
      border: '1px solid #2a3346',
      borderRadius: 8,
      padding: '2px 8px',
      color: '#8aa0ff',
      cursor: 'pointer'
    }}
  >
    {groupLabel()}
  </button>
</div>






        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          rows={6}
          style={{
            width: '95%',
            background: '#121722',
            color: '#e8eaed',
            border: '1px solid #2a3346',
            borderRadius: 12,
            padding: 10,
            resize: 'vertical',
          }}
        />

         <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 8 }}>ID: {task.id}</div> 

        <div style={{ display: 'flex', gap: 8, marginTop: 12, flexWrap: 'wrap' }}>
          <button
            onClick={save}
            disabled={saving || !text.trim()}
            style={{
              padding: '10px 14px',
              borderRadius: 12,
              border: '1px solid #2a3346',
              background: '#202840',
              color: '#e8eaed',
              cursor: 'pointer',
            }}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>

          <button
            onClick={toggleDone}
            disabled={saving}
            style={{
              padding: '10px 14px',
              borderRadius: 12,
              border: '1px solid #2a3346',
              background: isDone ? '#3a2b1f' : '#234324',
              color: isDone ? '#ffe7c7' : '#d7ffd7',
              cursor: 'pointer',
            }}
          >
            {isDone ? '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å ‚Üí Doing' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
          </button>



          {/* –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ */}
     {/* –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä / –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ */}



          {/* –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π / –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è */}
    {/* –î–ª—è —Å–æ–±—ã—Ç–∏–π ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (–µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ EventPanel) */}

{task?.type !== 'EVENT' && (
  task.assigneeChatId ? (
    <div
      style={{
        padding: '10px 14px',
        borderRadius: 12,
        border: '1px solid #2a3346',
        background: '#15251a',
        color: '#d7ffd7',
        display: 'inline-flex',
        gap: 8,
        alignItems: 'center',
      }}
      title="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –∑–∞–¥–∞—á–µ"
    >
      <span style={{ opacity: 0.8 }}>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</span>
      <strong>{task.assigneeName || task.assigneeChatId}</strong>
    </div>
  ) : (
    <ResponsibleActions
      taskId={taskId}
      taskTitle={text}
      groupId={groupId || undefined}
      meChatId={meChatId}
      currentAssigneeChatId={task?.assigneeChatId ?? null}
      members={members.map((m) => ({
        chatId: String(m.chatId),
        firstName: m.name || undefined,
      }))}
      canAssign={true}
      onAssigned={() => setRefreshTick((t) => t + 1)}
    />
  )
)}



        </div>





{media.length > 0 && (
  <div style={{ marginTop: 12 }}>
    <div style={{ fontSize: 14, opacity: .85, marginBottom: 6 }}>–í–ª–æ–∂–µ–Ω–∏—è</div>

    {/* –§–æ—Ç–æ */}
<div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
  {photos.map((m, idx) => (
    <button
      key={m.id}
      onClick={() => { setLightboxIndex(idx); setLightboxOpen(true); }}
      title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ"
      style={{
        display: 'inline-block',
        border: '1px solid #2a3346',
        borderRadius: 8,
        overflow: 'hidden',
        padding: 0,
        background: 'transparent',
        cursor: 'zoom-in'
      }}
    >
      <img
        src={`${API_BASE}${m.url}`}
        alt={m.fileName || '–§–æ—Ç–æ'}
        style={{ maxWidth: 160, maxHeight: 160, display: 'block' }}
      />
    </button>
  ))}
</div>

    {/* –ì–æ–ª–æ—Å–æ–≤—ã–µ */}
    {media.some(m => m.kind === 'voice') && (
      <div style={{ marginTop: 8, display: 'grid', gap: 6 }}>
        {media.filter(m => m.kind === 'voice').map(m => (
          <div key={m.id} style={{ padding: 8, border: '1px solid #2a3346', borderRadius: 8 }}>
            <audio controls src={`${API_BASE}${m.url}`} style={{ width: '100%' }} />
            <div style={{ fontSize: 12, opacity: .7 }}>
              {m.duration ? `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ~${m.duration}s` : '–ì–æ–ª–æ—Å–æ–≤–æ–µ'}
            </div>
          </div>
        ))}
      </div>
    )}

    {/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
    {media.some(m => m.kind === 'document') && (
      <div style={{ marginTop: 8, display: 'grid', gap: 6 }}>
        {media.filter(m => m.kind === 'document').map(m => (
          <a key={m.id}
             href={`${API_BASE}${m.url}`}
             target="_blank"
             rel="noreferrer"
             style={{ padding: 8, border: '1px solid #2a3346', borderRadius: 8, color: '#8aa0ff' }}>
            üìé {m.fileName || '–î–æ–∫—É–º–µ–Ω—Ç'}{m.fileSize ? ` ¬∑ ${(m.fileSize/1024/1024).toFixed(2)} MB` : ''}
          </a>
        ))}
      </div>
    )}
  </div>
)}





{isLightboxOpen && photos.length > 0 && (
  <div
    onClick={() => setLightboxOpen(false)}
    style={{
      position: 'fixed',
      inset: 0,
      background: 'rgba(0,0,0,0.7)',
      zIndex: 9999,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: 16
    }}
  >
    {/* –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏: –∫–ª–∏–∫–∏ –ø–æ —Ñ–æ–Ω—É –∑–∞–∫—Ä—ã–≤–∞—é—Ç, –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É ‚Äî –Ω–µ—Ç */}
    <div
      onClick={(e) => e.stopPropagation()}
      style={{ position: 'relative', maxWidth: '90vw', maxHeight: '90vh' }}
    >
      {/* –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      <img
        src={`${API_BASE}${photos[lightboxIndex].url}`}
        alt={photos[lightboxIndex].fileName || '–§–æ—Ç–æ'}
        style={{
          maxWidth: '90vw',
          maxHeight: '90vh',
          display: 'block',
          borderRadius: 12,
          boxShadow: '0 8px 32px rgba(0,0,0,0.5)'
        }}
      />











      {/* –ö—Ä–µ—Å—Ç–∏–∫ */}
      <button
        onClick={() => setLightboxOpen(false)}
        aria-label="–ó–∞–∫—Ä—ã—Ç—å"
        style={{
          position: 'absolute',
          top: 8, right: 8,
          background: 'rgba(0,0,0,0.5)',
          color: '#fff',
          border: 'none',
          borderRadius: 8,
          padding: '6px 10px',
          cursor: 'pointer',
          fontSize: 14
        }}
      >
        ‚úï
      </button>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ) */}
      {photos.length > 1 && (
        <>
          <button
            onClick={() => setLightboxIndex(i => (i - 1 + photos.length) % photos.length)}
            aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ"
            style={{
              position: 'absolute',
              top: '50%', left: -8,
              transform: 'translateY(-50%)',
              background: 'rgba(0,0,0,0.5)',
              color: '#fff',
              border: 'none',
              borderRadius: 8,
              padding: '8px 10px',
              cursor: 'pointer'
            }}
          >
            ‚Äπ
          </button>
          <button
            onClick={() => setLightboxIndex(i => (i + 1) % photos.length)}
            aria-label="–°–ª–µ–¥—É—é—â–µ–µ"
            style={{
              position: 'absolute',
              top: '50%', right: -8,
              transform: 'translateY(-50%)',
              background: 'rgba(0,0,0,0.5)',
              color: '#fff',
              border: 'none',
              borderRadius: 8,
              padding: '8px 10px',
              cursor: 'pointer'
            }}
          >
            ‚Ä∫
          </button>
        </>
      )}
    </div>
  </div>
)}




{task?.type === 'EVENT' && (
  <EventPanel
    eventId={task.id}
    startAt={String(task.startAt || '')}   // —Å—Ç—Ä–æ–∫–∞
    endAt={task.endAt ?? null}
    chatId={meChatId}
    isOrganizer={Boolean((task as any)?.meIsOrganizer)}
  />
)}

      

<CommentsThread taskId={taskId} meChatId={meChatId} />



      </div>













{/* –ü–æ—Ä—Ç–∞–ª —Å üëç, –≤–Ω–µ –ª—é–±—ã—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–æ–≤ */}
{(isClosing || thumbStage !== 0) &&
  createPortal(
    <div
      style={{
        position: 'fixed',
        inset: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        pointerEvents: 'none',
        zIndex: 99999,
      }}
    >
      <div
        style={{
          fontSize: 96,
          transform:
            thumbStage === 1 ? 'scale(1.0)' : thumbStage === 2 ? 'scale(1.22)' : 'scale(0.8)',
          opacity: thumbStage === 1 ? 1 : 0,
          transition: 'transform 300ms cubic-bezier(.2,.9,.2,1), opacity 300ms ease',
          filter: 'drop-shadow(0 10px 32px rgba(0,0,0,.45))',
          willChange: 'transform, opacity',
        }}
      >
        üëç
      </div>
    </div>,
    document.body
  )
}






{groupPickerOpen && (
  <div
    onClick={() => setGroupPickerOpen(false)}
    style={{
      position: 'fixed',
      inset: 0,
      background: 'rgba(0,0,0,.45)',
      zIndex: 2000,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }}
  >
    <div
      onClick={(e) => e.stopPropagation()}
      style={{
        background: '#1b2030',
        color: '#e8eaed',
        border: '1px solid #2a3346',
        borderRadius: 12,
        padding: 12,
        width: 'min(460px, 92vw)'
      }}
    >
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
        <div style={{ fontWeight: 700 }}>–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É</div>
        <button
          onClick={() => setGroupPickerOpen(false)}
          style={{ background: 'transparent', border: 'none', color: '#8aa0ff', cursor: 'pointer' }}
        >
          ‚úï
        </button>
      </div>

      {/* —Ç–∞–±—ã */}
      <div style={{ display: 'flex', gap: 8, marginBottom: 10 }}>
        <button
          onClick={() => setGroupTab('own')}
          style={{
            padding: '6px 10px',
            borderRadius: 999,
            border: '1px solid #2a3346',
            background: groupTab === 'own' ? '#1b2030' : '#121722',
            color: groupTab === 'own' ? '#8aa0ff' : '#e8eaed',
            cursor: 'pointer',
          }}
        >
          –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã ({ownGroups.length})
        </button>
        <button
          onClick={() => setGroupTab('member')}
          style={{
            padding: '6px 10px',
            borderRadius: 999,
            border: '1px solid #2a3346',
            background: groupTab === 'member' ? '#1b2030' : '#121722',
            color: groupTab === 'member' ? '#8aa0ff' : '#e8eaed',
            cursor: 'pointer',
          }}
        >
          –ü—Ä–æ–µ–∫—Ç—ã —Å–æ –º–Ω–æ–π ({memberGroups.length})
        </button>
      </div>

      {/* —Å–ø–∏—Å–æ–∫ */}
      <div style={{ display: 'grid', gap: 8, maxHeight: '50vh', overflow: 'auto' }}>
        {groupTab === 'own' && (
          <label style={{ display: 'flex', alignItems: 'center', gap: 8, cursor: 'pointer' }}>
            <input
              type="radio"
              name="mv_group"
              checked={!groupId}
              onChange={() => moveToGroup(null)}
            />
            <span>–ú–æ—è –≥—Ä—É–ø–ø–∞ (–ª–∏—á–Ω–∞—è –¥–æ—Å–∫–∞)</span>
          </label>
        )}

        {groupTab === 'own'
          ? ownGroups.map((g) => (
              <label key={g.id} style={{ display: 'flex', alignItems: 'center', gap: 8, cursor: 'pointer' }}>
                <input
                  type="radio"
                  name="mv_group"
                  checked={groupId === g.id}
                  onChange={() => moveToGroup(g.id)}
                />
                <span>{g.title}</span>
              </label>
            ))
          : memberGroups.map((g) => (
              <label key={g.id} style={{ display: 'flex', alignItems: 'center', gap: 8, cursor: 'pointer' }}>
                <input
                  type="radio"
                  name="mv_group"
                  checked={groupId === g.id}
                  onChange={() => moveToGroup(g.id)}
                />
                <span>
                  {g.title}
                  {g.ownerName && (
                    <span style={{ opacity: 0.7, marginLeft: 6 }}>
                      üëë {g.ownerName}
                    </span>
                  )}
                </span>
              </label>
            ))}
      </div>
    </div>
  </div>
)}





    </div>
  );
}
