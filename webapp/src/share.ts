

// webapp/src/share.ts
export function buildTaskMiniAppLink(taskId: string) {
  const bot =
    (import.meta.env.VITE_TG_BOT_USERNAME as string) || 'telegsar_bot';
  // deep-link, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä–æ–µ—Ç –º–∏–Ω–∏-–∞–ø–ø –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–¥–∞—á–∏
  // (–≤ App.tsx –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è tgWebAppStartParam/start_param = task_<id>)
  return `https://t.me/${bot}?startapp=task_${encodeURIComponent(taskId)}`;
}

export function buildTaskShareText(params: {
  title: string;
  description?: string | null;
  groupName?: string | null;
  due?: string | null;
}) {
  const lines: string[] = [];
  lines.push(`üóíÔ∏è ${params.title}`);
  if (params.groupName) lines.push(`–ì—Ä—É–ø–ø–∞: ${params.groupName}`);
  if (params.due) lines.push(`–î–µ–¥–ª–∞–π–Ω: ${params.due}`);
  if (params.description) {
    const desc = params.description.trim();
    const short = desc.length > 500 ? `${desc.slice(0, 500)}‚Ä¶` : desc;
    lines.push('');
    lines.push(short);
  }
  return lines.join('\n');
}

export function buildFullSharePayload(task: {
  id: string;
  title: string;
  description?: string | null;
  groupName?: string | null;
  due?: string | null;
}) {
  const url = buildTaskMiniAppLink(task.id);
  const text = buildTaskShareText({
    title: task.title,
    description: task.description,
    groupName: task.groupName,
    due: task.due,
  });

  // ‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:
  // üóíÔ∏è <–∑–∞–≥–æ–ª–æ–≤–æ–∫>
  //
  // üì≤ –û—Ç–∫—Ä—ã—Ç—å:
  // <—Å—Å—ã–ª–∫–∞>
  const full = `${text}\n\nüì≤ –û—Ç–∫—Ä—ã—Ç—å:\n${url}`;

  return { url, text, full };
}
